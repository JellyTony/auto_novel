// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.0
// source: novel/v1/novel.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 响应类型
type GenerateChapterStreamResponse_ResponseType int32

const (
	GenerateChapterStreamResponse_CONTENT  GenerateChapterStreamResponse_ResponseType = 0 // 内容片段
	GenerateChapterStreamResponse_PROGRESS GenerateChapterStreamResponse_ResponseType = 1 // 进度更新
	GenerateChapterStreamResponse_METADATA GenerateChapterStreamResponse_ResponseType = 2 // 元数据信息
	GenerateChapterStreamResponse_ERROR    GenerateChapterStreamResponse_ResponseType = 3 // 错误信息
	GenerateChapterStreamResponse_COMPLETE GenerateChapterStreamResponse_ResponseType = 4 // 生成完成
)

// Enum value maps for GenerateChapterStreamResponse_ResponseType.
var (
	GenerateChapterStreamResponse_ResponseType_name = map[int32]string{
		0: "CONTENT",
		1: "PROGRESS",
		2: "METADATA",
		3: "ERROR",
		4: "COMPLETE",
	}
	GenerateChapterStreamResponse_ResponseType_value = map[string]int32{
		"CONTENT":  0,
		"PROGRESS": 1,
		"METADATA": 2,
		"ERROR":    3,
		"COMPLETE": 4,
	}
)

func (x GenerateChapterStreamResponse_ResponseType) Enum() *GenerateChapterStreamResponse_ResponseType {
	p := new(GenerateChapterStreamResponse_ResponseType)
	*p = x
	return p
}

func (x GenerateChapterStreamResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateChapterStreamResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_novel_v1_novel_proto_enumTypes[0].Descriptor()
}

func (GenerateChapterStreamResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_novel_v1_novel_proto_enumTypes[0]
}

func (x GenerateChapterStreamResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateChapterStreamResponse_ResponseType.Descriptor instead.
func (GenerateChapterStreamResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{23, 0}
}

// 项目相关消息
type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 项目描述
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// 体裁：现代都市/悬疑/玄幻/科幻/古代言情
	Genre string `protobuf:"bytes,3,opt,name=genre,proto3" json:"genre,omitempty"`
	// 目标读者：青年/女性向/男性向/泛读者
	TargetAudience string `protobuf:"bytes,4,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	// 调性：温情/冷酷/快节奏/慢热
	Tone string `protobuf:"bytes,5,opt,name=tone,proto3" json:"tone,omitempty"`
	// 主题
	Themes []string `protobuf:"bytes,6,rep,name=themes,proto3" json:"themes,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{0}
}

func (x *CreateProjectRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProjectRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *CreateProjectRequest) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *CreateProjectRequest) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *CreateProjectRequest) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

// 项目创建响应
type CreateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 项目标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 项目状态
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProjectResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateProjectResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProjectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateProjectResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// 获取项目详情请求
type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// 获取项目详情响应
type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目详情
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{3}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// 列出项目请求
type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 页码
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页项目数
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{4}
}

func (x *ListProjectsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 列出项目响应
type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目列表
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// 总项目数
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{5}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListProjectsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 更新项目请求
type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 项目标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 项目描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 小说类型
	Genre string `protobuf:"bytes,4,opt,name=genre,proto3" json:"genre,omitempty"`
	// 目标读者
	TargetAudience string `protobuf:"bytes,5,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	// 写作风格
	Tone string `protobuf:"bytes,6,opt,name=tone,proto3" json:"tone,omitempty"`
	// 主题标签
	Themes []string `protobuf:"bytes,7,rep,name=themes,proto3" json:"themes,omitempty"`
	// 大纲
	Outline *Outline `protobuf:"bytes,8,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProjectRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *UpdateProjectRequest) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *UpdateProjectRequest) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *UpdateProjectRequest) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *UpdateProjectRequest) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

// 更新项目响应
type UpdateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新后的项目详情
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *UpdateProjectResponse) Reset() {
	*x = UpdateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectResponse) ProtoMessage() {}

func (x *UpdateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// 世界观相关消息
type GenerateWorldViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 体裁
	Genre string `protobuf:"bytes,2,opt,name=genre,proto3" json:"genre,omitempty"`
	// 时代与地点
	Setting string `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	// 基本规则/设定
	KeyRules []string `protobuf:"bytes,4,rep,name=key_rules,json=keyRules,proto3" json:"key_rules,omitempty"`
	// 调性
	Tone string `protobuf:"bytes,5,opt,name=tone,proto3" json:"tone,omitempty"`
	// 目标读者
	TargetAudience string `protobuf:"bytes,6,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	// 主题
	Themes []string `protobuf:"bytes,7,rep,name=themes,proto3" json:"themes,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,8,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *GenerateWorldViewRequest) Reset() {
	*x = GenerateWorldViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWorldViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWorldViewRequest) ProtoMessage() {}

func (x *GenerateWorldViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWorldViewRequest.ProtoReflect.Descriptor instead.
func (*GenerateWorldViewRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateWorldViewRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateWorldViewRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *GenerateWorldViewRequest) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *GenerateWorldViewRequest) GetKeyRules() []string {
	if x != nil {
		return x.KeyRules
	}
	return nil
}

func (x *GenerateWorldViewRequest) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *GenerateWorldViewRequest) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *GenerateWorldViewRequest) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *GenerateWorldViewRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 生成世界观响应
type GenerateWorldViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 世界观
	WorldView *WorldView `protobuf:"bytes,1,opt,name=world_view,json=worldView,proto3" json:"world_view,omitempty"`
}

func (x *GenerateWorldViewResponse) Reset() {
	*x = GenerateWorldViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateWorldViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateWorldViewResponse) ProtoMessage() {}

func (x *GenerateWorldViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateWorldViewResponse.ProtoReflect.Descriptor instead.
func (*GenerateWorldViewResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateWorldViewResponse) GetWorldView() *WorldView {
	if x != nil {
		return x.WorldView
	}
	return nil
}

// 人物卡相关消息
type GenerateCharactersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 人物名称列表
	CharacterNames []string `protobuf:"bytes,2,rep,name=character_names,json=characterNames,proto3" json:"character_names,omitempty"`
	// 世界观
	WorldView *WorldView `protobuf:"bytes,3,opt,name=world_view,json=worldView,proto3" json:"world_view,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,4,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *GenerateCharactersRequest) Reset() {
	*x = GenerateCharactersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCharactersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCharactersRequest) ProtoMessage() {}

func (x *GenerateCharactersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCharactersRequest.ProtoReflect.Descriptor instead.
func (*GenerateCharactersRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateCharactersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateCharactersRequest) GetCharacterNames() []string {
	if x != nil {
		return x.CharacterNames
	}
	return nil
}

func (x *GenerateCharactersRequest) GetWorldView() *WorldView {
	if x != nil {
		return x.WorldView
	}
	return nil
}

func (x *GenerateCharactersRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 生成人物卡响应
type GenerateCharactersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人物列表
	Characters []*Character `protobuf:"bytes,1,rep,name=characters,proto3" json:"characters,omitempty"`
}

func (x *GenerateCharactersResponse) Reset() {
	*x = GenerateCharactersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCharactersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCharactersResponse) ProtoMessage() {}

func (x *GenerateCharactersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCharactersResponse.ProtoReflect.Descriptor instead.
func (*GenerateCharactersResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateCharactersResponse) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

// 章节大纲相关消息
type GenerateOutlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节数
	ChapterCount int32 `protobuf:"varint,2,opt,name=chapter_count,json=chapterCount,proto3" json:"chapter_count,omitempty"`
	// 世界观
	WorldView *WorldView `protobuf:"bytes,3,opt,name=world_view,json=worldView,proto3" json:"world_view,omitempty"`
	// 人物列表
	Characters []*Character `protobuf:"bytes,4,rep,name=characters,proto3" json:"characters,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,5,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *GenerateOutlineRequest) Reset() {
	*x = GenerateOutlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOutlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOutlineRequest) ProtoMessage() {}

func (x *GenerateOutlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOutlineRequest.ProtoReflect.Descriptor instead.
func (*GenerateOutlineRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateOutlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateOutlineRequest) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *GenerateOutlineRequest) GetWorldView() *WorldView {
	if x != nil {
		return x.WorldView
	}
	return nil
}

func (x *GenerateOutlineRequest) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *GenerateOutlineRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 生成章节大纲响应
type GenerateOutlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 章节大纲
	Outline *Outline `protobuf:"bytes,1,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *GenerateOutlineResponse) Reset() {
	*x = GenerateOutlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOutlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOutlineResponse) ProtoMessage() {}

func (x *GenerateOutlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOutlineResponse.ProtoReflect.Descriptor instead.
func (*GenerateOutlineResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateOutlineResponse) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

// 更新章节大纲请求
type UpdateChapterOutlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节索引
	ChapterIndex int32 `protobuf:"varint,2,opt,name=chapter_index,json=chapterIndex,proto3" json:"chapter_index,omitempty"`
	// 章节标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 章节概要
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// 剧情目标
	Goal string `protobuf:"bytes,5,opt,name=goal,proto3" json:"goal,omitempty"`
	// 小冲突/反转点
	TwistHint string `protobuf:"bytes,6,opt,name=twist_hint,json=twistHint,proto3" json:"twist_hint,omitempty"`
	// 关键道具/线索
	ImportantItems []string `protobuf:"bytes,7,rep,name=important_items,json=importantItems,proto3" json:"important_items,omitempty"`
}

func (x *UpdateChapterOutlineRequest) Reset() {
	*x = UpdateChapterOutlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChapterOutlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChapterOutlineRequest) ProtoMessage() {}

func (x *UpdateChapterOutlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChapterOutlineRequest.ProtoReflect.Descriptor instead.
func (*UpdateChapterOutlineRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateChapterOutlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateChapterOutlineRequest) GetChapterIndex() int32 {
	if x != nil {
		return x.ChapterIndex
	}
	return 0
}

func (x *UpdateChapterOutlineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChapterOutlineRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *UpdateChapterOutlineRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *UpdateChapterOutlineRequest) GetTwistHint() string {
	if x != nil {
		return x.TwistHint
	}
	return ""
}

func (x *UpdateChapterOutlineRequest) GetImportantItems() []string {
	if x != nil {
		return x.ImportantItems
	}
	return nil
}

// 更新章节大纲响应
type UpdateChapterOutlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新后的章节大纲
	Outline *Outline `protobuf:"bytes,1,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *UpdateChapterOutlineResponse) Reset() {
	*x = UpdateChapterOutlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChapterOutlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChapterOutlineResponse) ProtoMessage() {}

func (x *UpdateChapterOutlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChapterOutlineResponse.ProtoReflect.Descriptor instead.
func (*UpdateChapterOutlineResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateChapterOutlineResponse) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

// 删除章节大纲请求
type DeleteChapterOutlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节索引
	ChapterIndex int32 `protobuf:"varint,2,opt,name=chapter_index,json=chapterIndex,proto3" json:"chapter_index,omitempty"`
}

func (x *DeleteChapterOutlineRequest) Reset() {
	*x = DeleteChapterOutlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChapterOutlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChapterOutlineRequest) ProtoMessage() {}

func (x *DeleteChapterOutlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChapterOutlineRequest.ProtoReflect.Descriptor instead.
func (*DeleteChapterOutlineRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteChapterOutlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteChapterOutlineRequest) GetChapterIndex() int32 {
	if x != nil {
		return x.ChapterIndex
	}
	return 0
}

// 删除章节大纲响应
type DeleteChapterOutlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新后的章节大纲
	Outline *Outline `protobuf:"bytes,1,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *DeleteChapterOutlineResponse) Reset() {
	*x = DeleteChapterOutlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChapterOutlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChapterOutlineResponse) ProtoMessage() {}

func (x *DeleteChapterOutlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChapterOutlineResponse.ProtoReflect.Descriptor instead.
func (*DeleteChapterOutlineResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteChapterOutlineResponse) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

// 重排序章节大纲请求
type ReorderChapterOutlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节索引映射：旧索引 -> 新索引
	ChapterMappings []*ChapterIndexMapping `protobuf:"bytes,2,rep,name=chapter_mappings,json=chapterMappings,proto3" json:"chapter_mappings,omitempty"`
}

func (x *ReorderChapterOutlineRequest) Reset() {
	*x = ReorderChapterOutlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderChapterOutlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderChapterOutlineRequest) ProtoMessage() {}

func (x *ReorderChapterOutlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderChapterOutlineRequest.ProtoReflect.Descriptor instead.
func (*ReorderChapterOutlineRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{18}
}

func (x *ReorderChapterOutlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ReorderChapterOutlineRequest) GetChapterMappings() []*ChapterIndexMapping {
	if x != nil {
		return x.ChapterMappings
	}
	return nil
}

// 章节索引映射
type ChapterIndexMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 原索引
	OldIndex int32 `protobuf:"varint,1,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	// 新索引
	NewIndex int32 `protobuf:"varint,2,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
}

func (x *ChapterIndexMapping) Reset() {
	*x = ChapterIndexMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterIndexMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterIndexMapping) ProtoMessage() {}

func (x *ChapterIndexMapping) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterIndexMapping.ProtoReflect.Descriptor instead.
func (*ChapterIndexMapping) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{19}
}

func (x *ChapterIndexMapping) GetOldIndex() int32 {
	if x != nil {
		return x.OldIndex
	}
	return 0
}

func (x *ChapterIndexMapping) GetNewIndex() int32 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

// 重排序章节大纲响应
type ReorderChapterOutlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新后的章节大纲
	Outline *Outline `protobuf:"bytes,1,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *ReorderChapterOutlineResponse) Reset() {
	*x = ReorderChapterOutlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderChapterOutlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderChapterOutlineResponse) ProtoMessage() {}

func (x *ReorderChapterOutlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderChapterOutlineResponse.ProtoReflect.Descriptor instead.
func (*ReorderChapterOutlineResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{20}
}

func (x *ReorderChapterOutlineResponse) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

// 章节生成相关消息
type GenerateChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节大纲
	ChapterOutline *ChapterOutline `protobuf:"bytes,2,opt,name=chapter_outline,json=chapterOutline,proto3" json:"chapter_outline,omitempty"`
	// 生成上下文
	Context *GenerationContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	// 目标单词数
	TargetWordCount int32 `protobuf:"varint,4,opt,name=target_word_count,json=targetWordCount,proto3" json:"target_word_count,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,5,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *GenerateChapterRequest) Reset() {
	*x = GenerateChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateChapterRequest) ProtoMessage() {}

func (x *GenerateChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateChapterRequest.ProtoReflect.Descriptor instead.
func (*GenerateChapterRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{21}
}

func (x *GenerateChapterRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateChapterRequest) GetChapterOutline() *ChapterOutline {
	if x != nil {
		return x.ChapterOutline
	}
	return nil
}

func (x *GenerateChapterRequest) GetContext() *GenerationContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GenerateChapterRequest) GetTargetWordCount() int32 {
	if x != nil {
		return x.TargetWordCount
	}
	return 0
}

func (x *GenerateChapterRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 生成章节响应
type GenerateChapterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 章节内容
	Chapter *Chapter `protobuf:"bytes,1,opt,name=chapter,proto3" json:"chapter,omitempty"`
}

func (x *GenerateChapterResponse) Reset() {
	*x = GenerateChapterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateChapterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateChapterResponse) ProtoMessage() {}

func (x *GenerateChapterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateChapterResponse.ProtoReflect.Descriptor instead.
func (*GenerateChapterResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateChapterResponse) GetChapter() *Chapter {
	if x != nil {
		return x.Chapter
	}
	return nil
}

// 流式章节生成响应
type GenerateChapterStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type GenerateChapterStreamResponse_ResponseType `protobuf:"varint,1,opt,name=type,proto3,enum=novel.v1.GenerateChapterStreamResponse_ResponseType" json:"type,omitempty"`
	// 内容相关字段
	ContentChunk string `protobuf:"bytes,2,opt,name=content_chunk,json=contentChunk,proto3" json:"content_chunk,omitempty"` // 内容片段
	ChunkIndex   int32  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`      // 片段索引
	// 进度相关字段
	Progress float32 `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"` // 进度百分比 (0-1)
	Stage    string  `protobuf:"bytes,5,opt,name=stage,proto3" json:"stage,omitempty"`         // 当前阶段描述
	// 元数据字段
	ChapterId string `protobuf:"bytes,6,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`  // 章节ID
	Title     string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                           // 章节标题
	WordCount int32  `protobuf:"varint,8,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"` // 当前字数
	// 错误信息
	ErrorMessage string `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误描述
	ErrorCode    string `protobuf:"bytes,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`         // 错误代码
	// 完成信息
	FinalChapter *Chapter `protobuf:"bytes,11,opt,name=final_chapter,json=finalChapter,proto3" json:"final_chapter,omitempty"` // 最终章节对象
}

func (x *GenerateChapterStreamResponse) Reset() {
	*x = GenerateChapterStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateChapterStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateChapterStreamResponse) ProtoMessage() {}

func (x *GenerateChapterStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateChapterStreamResponse.ProtoReflect.Descriptor instead.
func (*GenerateChapterStreamResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{23}
}

func (x *GenerateChapterStreamResponse) GetType() GenerateChapterStreamResponse_ResponseType {
	if x != nil {
		return x.Type
	}
	return GenerateChapterStreamResponse_CONTENT
}

func (x *GenerateChapterStreamResponse) GetContentChunk() string {
	if x != nil {
		return x.ContentChunk
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *GenerateChapterStreamResponse) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GenerateChapterStreamResponse) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetChapterId() string {
	if x != nil {
		return x.ChapterId
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *GenerateChapterStreamResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GenerateChapterStreamResponse) GetFinalChapter() *Chapter {
	if x != nil {
		return x.FinalChapter
	}
	return nil
}

// 润色相关消息
type PolishChapterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节ID
	ChapterId string `protobuf:"bytes,2,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	// 润色风格：正式/非正式/文学
	Style string `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// 润色焦点：语法/流程/对话/描述
	Focus []string `protobuf:"bytes,4,rep,name=focus,proto3" json:"focus,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,5,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *PolishChapterRequest) Reset() {
	*x = PolishChapterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolishChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolishChapterRequest) ProtoMessage() {}

func (x *PolishChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolishChapterRequest.ProtoReflect.Descriptor instead.
func (*PolishChapterRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{24}
}

func (x *PolishChapterRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PolishChapterRequest) GetChapterId() string {
	if x != nil {
		return x.ChapterId
	}
	return ""
}

func (x *PolishChapterRequest) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *PolishChapterRequest) GetFocus() []string {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *PolishChapterRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 润色章节响应
type PolishChapterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 润色后的章节内容
	PolishedChapter *Chapter `protobuf:"bytes,1,opt,name=polished_chapter,json=polishedChapter,proto3" json:"polished_chapter,omitempty"`
}

func (x *PolishChapterResponse) Reset() {
	*x = PolishChapterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolishChapterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolishChapterResponse) ProtoMessage() {}

func (x *PolishChapterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolishChapterResponse.ProtoReflect.Descriptor instead.
func (*PolishChapterResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{25}
}

func (x *PolishChapterResponse) GetPolishedChapter() *Chapter {
	if x != nil {
		return x.PolishedChapter
	}
	return nil
}

// 质量检测相关消息
type CheckQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节ID
	ChapterId string `protobuf:"bytes,2,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	// polish/proofread/critique/consistency/all
	CheckType string `protobuf:"bytes,3,opt,name=check_type,json=checkType,proto3" json:"check_type,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,4,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *CheckQualityRequest) Reset() {
	*x = CheckQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQualityRequest) ProtoMessage() {}

func (x *CheckQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQualityRequest.ProtoReflect.Descriptor instead.
func (*CheckQualityRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{26}
}

func (x *CheckQualityRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CheckQualityRequest) GetChapterId() string {
	if x != nil {
		return x.ChapterId
	}
	return ""
}

func (x *CheckQualityRequest) GetCheckType() string {
	if x != nil {
		return x.CheckType
	}
	return ""
}

func (x *CheckQualityRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 质量检测响应
type CheckQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 润色后的章节内容
	PolishedChapter *Chapter `protobuf:"bytes,1,opt,name=polished_chapter,json=polishedChapter,proto3" json:"polished_chapter,omitempty"`
	// 语法检查结果
	ProofreadResult *ProofreadResult `protobuf:"bytes,2,opt,name=proofread_result,json=proofreadResult,proto3" json:"proofread_result,omitempty"`
	// 逻辑检查结果
	CritiqueResult *CritiqueResult `protobuf:"bytes,3,opt,name=critique_result,json=critiqueResult,proto3" json:"critique_result,omitempty"`
	// 一致性检查结果
	ConsistencyIssues []*ConsistencyIssue `protobuf:"bytes,4,rep,name=consistency_issues,json=consistencyIssues,proto3" json:"consistency_issues,omitempty"`
	// 总质量分
	OverallScore float64 `protobuf:"fixed64,5,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	// 质量检测建议
	Recommendations []string `protobuf:"bytes,6,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
}

func (x *CheckQualityResponse) Reset() {
	*x = CheckQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQualityResponse) ProtoMessage() {}

func (x *CheckQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQualityResponse.ProtoReflect.Descriptor instead.
func (*CheckQualityResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{27}
}

func (x *CheckQualityResponse) GetPolishedChapter() *Chapter {
	if x != nil {
		return x.PolishedChapter
	}
	return nil
}

func (x *CheckQualityResponse) GetProofreadResult() *ProofreadResult {
	if x != nil {
		return x.ProofreadResult
	}
	return nil
}

func (x *CheckQualityResponse) GetCritiqueResult() *CritiqueResult {
	if x != nil {
		return x.CritiqueResult
	}
	return nil
}

func (x *CheckQualityResponse) GetConsistencyIssues() []*ConsistencyIssue {
	if x != nil {
		return x.ConsistencyIssues
	}
	return nil
}

func (x *CheckQualityResponse) GetOverallScore() float64 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *CheckQualityResponse) GetRecommendations() []string {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

// 批量质量检测请求
type BatchCheckQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节ID列表
	ChapterIds []string `protobuf:"bytes,2,rep,name=chapter_ids,json=chapterIds,proto3" json:"chapter_ids,omitempty"`
	// polish/proofread/critique/consistency/all
	CheckType string `protobuf:"bytes,3,opt,name=check_type,json=checkType,proto3" json:"check_type,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,4,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *BatchCheckQualityRequest) Reset() {
	*x = BatchCheckQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckQualityRequest) ProtoMessage() {}

func (x *BatchCheckQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckQualityRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckQualityRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{28}
}

func (x *BatchCheckQualityRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchCheckQualityRequest) GetChapterIds() []string {
	if x != nil {
		return x.ChapterIds
	}
	return nil
}

func (x *BatchCheckQualityRequest) GetCheckType() string {
	if x != nil {
		return x.CheckType
	}
	return ""
}

func (x *BatchCheckQualityRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 批量质量检测响应
type BatchCheckQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个章节的质量检测结果
	Results []*CheckQualityResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// 质量检测摘要
	Summary *QualitySummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// 总质量分
	OverallScore float64 `protobuf:"fixed64,3,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
}

func (x *BatchCheckQualityResponse) Reset() {
	*x = BatchCheckQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckQualityResponse) ProtoMessage() {}

func (x *BatchCheckQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckQualityResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckQualityResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{29}
}

func (x *BatchCheckQualityResponse) GetResults() []*CheckQualityResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BatchCheckQualityResponse) GetSummary() *QualitySummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *BatchCheckQualityResponse) GetOverallScore() float64 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

// 语法检查结果
type ProofreadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 修正后的章节内容
	CorrectedContent string `protobuf:"bytes,1,opt,name=corrected_content,json=correctedContent,proto3" json:"corrected_content,omitempty"`
	// 语法错误列表
	Issues []*QualityIssue `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// 语法修正建议
	Suggestions []string `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *ProofreadResult) Reset() {
	*x = ProofreadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofreadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofreadResult) ProtoMessage() {}

func (x *ProofreadResult) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofreadResult.ProtoReflect.Descriptor instead.
func (*ProofreadResult) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{30}
}

func (x *ProofreadResult) GetCorrectedContent() string {
	if x != nil {
		return x.CorrectedContent
	}
	return ""
}

func (x *ProofreadResult) GetIssues() []*QualityIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ProofreadResult) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// 逻辑检查结果
type CritiqueResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 逻辑错误列表
	LogicalIssues []string `protobuf:"bytes,1,rep,name=logical_issues,json=logicalIssues,proto3" json:"logical_issues,omitempty"`
	// 人物关系错误列表
	CharacterIssues []string `protobuf:"bytes,2,rep,name=character_issues,json=characterIssues,proto3" json:"character_issues,omitempty"`
	// pacing/flow 错误列表
	PacingIssues []string `protobuf:"bytes,3,rep,name=pacing_issues,json=pacingIssues,proto3" json:"pacing_issues,omitempty"`
	// 改进建议列表
	Improvements []string `protobuf:"bytes,4,rep,name=improvements,proto3" json:"improvements,omitempty"`
	// 修正后的示例段落
	FixedExample string `protobuf:"bytes,5,opt,name=fixed_example,json=fixedExample,proto3" json:"fixed_example,omitempty"`
	// 总质量分
	OverallScore int32 `protobuf:"varint,6,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
}

func (x *CritiqueResult) Reset() {
	*x = CritiqueResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CritiqueResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CritiqueResult) ProtoMessage() {}

func (x *CritiqueResult) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CritiqueResult.ProtoReflect.Descriptor instead.
func (*CritiqueResult) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{31}
}

func (x *CritiqueResult) GetLogicalIssues() []string {
	if x != nil {
		return x.LogicalIssues
	}
	return nil
}

func (x *CritiqueResult) GetCharacterIssues() []string {
	if x != nil {
		return x.CharacterIssues
	}
	return nil
}

func (x *CritiqueResult) GetPacingIssues() []string {
	if x != nil {
		return x.PacingIssues
	}
	return nil
}

func (x *CritiqueResult) GetImprovements() []string {
	if x != nil {
		return x.Improvements
	}
	return nil
}

func (x *CritiqueResult) GetFixedExample() string {
	if x != nil {
		return x.FixedExample
	}
	return ""
}

func (x *CritiqueResult) GetOverallScore() int32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

// 质量问题
type QualityIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题类型：grammar/punctuation/spelling/style
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 问题严重程度：high/medium/low
	Severity string `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	// 问题描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 问题位置描述
	Position string `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// 原文
	Original string `protobuf:"bytes,5,opt,name=original,proto3" json:"original,omitempty"`
	// 修正后
	Corrected string `protobuf:"bytes,6,opt,name=corrected,proto3" json:"corrected,omitempty"`
}

func (x *QualityIssue) Reset() {
	*x = QualityIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityIssue) ProtoMessage() {}

func (x *QualityIssue) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityIssue.ProtoReflect.Descriptor instead.
func (*QualityIssue) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{32}
}

func (x *QualityIssue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QualityIssue) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *QualityIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QualityIssue) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *QualityIssue) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *QualityIssue) GetCorrected() string {
	if x != nil {
		return x.Corrected
	}
	return ""
}

// 质量检测摘要
type QualitySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总问题数
	TotalIssues int32 `protobuf:"varint,1,opt,name=total_issues,json=totalIssues,proto3" json:"total_issues,omitempty"`
	// 按类型统计问题数
	IssuesByType map[string]int32 `protobuf:"bytes,2,rep,name=issues_by_type,json=issuesByType,proto3" json:"issues_by_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 按严重程度统计问题数
	IssuesBySeverity map[string]int32 `protobuf:"bytes,3,rep,name=issues_by_severity,json=issuesBySeverity,proto3" json:"issues_by_severity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 质量检测建议
	Recommendations []string `protobuf:"bytes,4,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	// 质量趋势（按章节）
	QualityTrends []float64 `protobuf:"fixed64,5,rep,packed,name=quality_trends,json=qualityTrends,proto3" json:"quality_trends,omitempty"`
}

func (x *QualitySummary) Reset() {
	*x = QualitySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualitySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualitySummary) ProtoMessage() {}

func (x *QualitySummary) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualitySummary.ProtoReflect.Descriptor instead.
func (*QualitySummary) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{33}
}

func (x *QualitySummary) GetTotalIssues() int32 {
	if x != nil {
		return x.TotalIssues
	}
	return 0
}

func (x *QualitySummary) GetIssuesByType() map[string]int32 {
	if x != nil {
		return x.IssuesByType
	}
	return nil
}

func (x *QualitySummary) GetIssuesBySeverity() map[string]int32 {
	if x != nil {
		return x.IssuesBySeverity
	}
	return nil
}

func (x *QualitySummary) GetRecommendations() []string {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *QualitySummary) GetQualityTrends() []float64 {
	if x != nil {
		return x.QualityTrends
	}
	return nil
}

// 一致性检查相关消息
type CheckConsistencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 检查类型：character/plot/world/timeline/all
	CheckType string `protobuf:"bytes,2,opt,name=check_type,json=checkType,proto3" json:"check_type,omitempty"`
	// 章节ID列表
	ChapterIds []string `protobuf:"bytes,3,rep,name=chapter_ids,json=chapterIds,proto3" json:"chapter_ids,omitempty"`
	// LLM选项
	LlmOptions *LLMOptions `protobuf:"bytes,4,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *CheckConsistencyRequest) Reset() {
	*x = CheckConsistencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConsistencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConsistencyRequest) ProtoMessage() {}

func (x *CheckConsistencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConsistencyRequest.ProtoReflect.Descriptor instead.
func (*CheckConsistencyRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{34}
}

func (x *CheckConsistencyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CheckConsistencyRequest) GetCheckType() string {
	if x != nil {
		return x.CheckType
	}
	return ""
}

func (x *CheckConsistencyRequest) GetChapterIds() []string {
	if x != nil {
		return x.ChapterIds
	}
	return nil
}

func (x *CheckConsistencyRequest) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 一致性检查响应
type CheckConsistencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一致性问题列表
	Issues []*ConsistencyIssue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	// 一致性修正建议列表
	Suggestions []string `protobuf:"bytes,2,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	// 总质量分
	OverallScore float64 `protobuf:"fixed64,3,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
}

func (x *CheckConsistencyResponse) Reset() {
	*x = CheckConsistencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConsistencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConsistencyResponse) ProtoMessage() {}

func (x *CheckConsistencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConsistencyResponse.ProtoReflect.Descriptor instead.
func (*CheckConsistencyResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{35}
}

func (x *CheckConsistencyResponse) GetIssues() []*ConsistencyIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *CheckConsistencyResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *CheckConsistencyResponse) GetOverallScore() float64 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

// 完整小说生成相关消息
type GenerateNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 生成选项
	Options *GenerateOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GenerateNovelRequest) Reset() {
	*x = GenerateNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNovelRequest) ProtoMessage() {}

func (x *GenerateNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNovelRequest.ProtoReflect.Descriptor instead.
func (*GenerateNovelRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{36}
}

func (x *GenerateNovelRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateNovelRequest) GetOptions() *GenerateOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 完整小说生成响应
type GenerateNovelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 生成状态：generating/completed/error
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 生成进度：0.0-1.0
	Progress float64 `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 当前生成阶段：worldbuilding/character/outline/chapter/polish/consistency
	CurrentStage string `protobuf:"bytes,3,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"`
	// 生成消息
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// 生成的章节列表
	Chapters []*Chapter `protobuf:"bytes,5,rep,name=chapters,proto3" json:"chapters,omitempty"`
	// 生成问题列表
	Issues []string `protobuf:"bytes,6,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *GenerateNovelResponse) Reset() {
	*x = GenerateNovelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNovelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNovelResponse) ProtoMessage() {}

func (x *GenerateNovelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNovelResponse.ProtoReflect.Descriptor instead.
func (*GenerateNovelResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{37}
}

func (x *GenerateNovelResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GenerateNovelResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *GenerateNovelResponse) GetCurrentStage() string {
	if x != nil {
		return x.CurrentStage
	}
	return ""
}

func (x *GenerateNovelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GenerateNovelResponse) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *GenerateNovelResponse) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

// 导出相关消息
type ExportNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 导出格式：txt/epub/pdf
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 导出选项
	Options *ExportOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ExportNovelRequest) Reset() {
	*x = ExportNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNovelRequest) ProtoMessage() {}

func (x *ExportNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNovelRequest.ProtoReflect.Descriptor instead.
func (*ExportNovelRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{38}
}

func (x *ExportNovelRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ExportNovelRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ExportNovelRequest) GetOptions() *ExportOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 导出响应
type ExportNovelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 下载URL
	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// 文件大小（字节）
	FileSize int64 `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
}

func (x *ExportNovelResponse) Reset() {
	*x = ExportNovelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportNovelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNovelResponse) ProtoMessage() {}

func (x *ExportNovelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNovelResponse.ProtoReflect.Descriptor instead.
func (*ExportNovelResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{39}
}

func (x *ExportNovelResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *ExportNovelResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ExportNovelResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

// 短视频分镜脚本相关消息
type GenerateVideoScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节ID列表
	ChapterIds []string `protobuf:"bytes,2,rep,name=chapter_ids,json=chapterIds,proto3" json:"chapter_ids,omitempty"`
	// 视频分镜脚本选项
	Options *VideoScriptOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GenerateVideoScriptRequest) Reset() {
	*x = GenerateVideoScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateVideoScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVideoScriptRequest) ProtoMessage() {}

func (x *GenerateVideoScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVideoScriptRequest.ProtoReflect.Descriptor instead.
func (*GenerateVideoScriptRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{40}
}

func (x *GenerateVideoScriptRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateVideoScriptRequest) GetChapterIds() []string {
	if x != nil {
		return x.ChapterIds
	}
	return nil
}

func (x *GenerateVideoScriptRequest) GetOptions() *VideoScriptOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 视频分镜脚本响应
type GenerateVideoScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频分镜场景列表
	Scenes []*VideoScene `protobuf:"bytes,1,rep,name=scenes,proto3" json:"scenes,omitempty"`
}

func (x *GenerateVideoScriptResponse) Reset() {
	*x = GenerateVideoScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateVideoScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVideoScriptResponse) ProtoMessage() {}

func (x *GenerateVideoScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVideoScriptResponse.ProtoReflect.Descriptor instead.
func (*GenerateVideoScriptResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{41}
}

func (x *GenerateVideoScriptResponse) GetScenes() []*VideoScene {
	if x != nil {
		return x.Scenes
	}
	return nil
}

// 数据模型
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 项目描述 （可选）
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 项目类型：novel/short_story
	Genre string `protobuf:"bytes,4,opt,name=genre,proto3" json:"genre,omitempty"`
	// 目标受众：general/adult
	TargetAudience string `protobuf:"bytes,5,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	// 写作风格：formal/informal
	Tone   string   `protobuf:"bytes,6,opt,name=tone,proto3" json:"tone,omitempty"`
	Themes []string `protobuf:"bytes,7,rep,name=themes,proto3" json:"themes,omitempty"`
	// 项目状态：draft/generating/completed/error
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// 世界视图
	WorldView *WorldView `protobuf:"bytes,9,opt,name=world_view,json=worldView,proto3" json:"world_view,omitempty"`
	// 人物角色列表
	Characters []*Character `protobuf:"bytes,10,rep,name=characters,proto3" json:"characters,omitempty"`
	// 章节大纲
	Outline *Outline `protobuf:"bytes,11,opt,name=outline,proto3" json:"outline,omitempty"`
	// 章节列表
	Chapters []*Chapter `protobuf:"bytes,12,rep,name=chapters,proto3" json:"chapters,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{42}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Project) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *Project) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *Project) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *Project) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Project) GetWorldView() *WorldView {
	if x != nil {
		return x.WorldView
	}
	return nil
}

func (x *Project) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Project) GetOutline() *Outline {
	if x != nil {
		return x.Outline
	}
	return nil
}

func (x *Project) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Project) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Project) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 世界视图
type WorldView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 世界视图标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 世界视图摘要
	Synopsis string `protobuf:"bytes,2,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	// 世界视图设置描述
	Setting string `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	// 世界视图关键规则列表
	KeyRules []string `protobuf:"bytes,4,rep,name=key_rules,json=keyRules,proto3" json:"key_rules,omitempty"`
	// 世界视图写作风格示例列表
	ToneExamples []string `protobuf:"bytes,5,rep,name=tone_examples,json=toneExamples,proto3" json:"tone_examples,omitempty"`
	// 世界视图主题列表
	Themes []string `protobuf:"bytes,6,rep,name=themes,proto3" json:"themes,omitempty"`
}

func (x *WorldView) Reset() {
	*x = WorldView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldView) ProtoMessage() {}

func (x *WorldView) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldView.ProtoReflect.Descriptor instead.
func (*WorldView) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{43}
}

func (x *WorldView) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WorldView) GetSynopsis() string {
	if x != nil {
		return x.Synopsis
	}
	return ""
}

func (x *WorldView) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *WorldView) GetKeyRules() []string {
	if x != nil {
		return x.KeyRules
	}
	return nil
}

func (x *WorldView) GetToneExamples() []string {
	if x != nil {
		return x.ToneExamples
	}
	return nil
}

func (x *WorldView) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

// 人物角色
type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人物角色ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目ID
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 人物角色名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 人物角色角色描述
	Role string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// 人物角色年龄
	Age int32 `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	// 人物角色外貌描述
	Appearance string `protobuf:"bytes,6,opt,name=appearance,proto3" json:"appearance,omitempty"`
	// 人物角色背景描述
	Background string `protobuf:"bytes,7,opt,name=background,proto3" json:"background,omitempty"`
	// 人物角色动机描述
	Motivation string `protobuf:"bytes,8,opt,name=motivation,proto3" json:"motivation,omitempty"`
	// 人物角色缺陷描述列表
	Flaws []string `protobuf:"bytes,9,rep,name=flaws,proto3" json:"flaws,omitempty"`
	// 人物角色语音语调描述
	SpeechTone string `protobuf:"bytes,10,opt,name=speech_tone,json=speechTone,proto3" json:"speech_tone,omitempty"`
	// 人物角色秘密描述列表
	Secrets []string `protobuf:"bytes,11,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// 人物角色关系映射
	RelationshipMap map[string]string `protobuf:"bytes,12,rep,name=relationship_map,json=relationshipMap,proto3" json:"relationship_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{44}
}

func (x *Character) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Character) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Character) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Character) GetAppearance() string {
	if x != nil {
		return x.Appearance
	}
	return ""
}

func (x *Character) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *Character) GetMotivation() string {
	if x != nil {
		return x.Motivation
	}
	return ""
}

func (x *Character) GetFlaws() []string {
	if x != nil {
		return x.Flaws
	}
	return nil
}

func (x *Character) GetSpeechTone() string {
	if x != nil {
		return x.SpeechTone
	}
	return ""
}

func (x *Character) GetSecrets() []string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Character) GetRelationshipMap() map[string]string {
	if x != nil {
		return x.RelationshipMap
	}
	return nil
}

// 章节大纲
type Outline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 章节大纲ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目ID
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节大纲列表
	Chapters []*ChapterOutline `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *Outline) Reset() {
	*x = Outline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outline) ProtoMessage() {}

func (x *Outline) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outline.ProtoReflect.Descriptor instead.
func (*Outline) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{45}
}

func (x *Outline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Outline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Outline) GetChapters() []*ChapterOutline {
	if x != nil {
		return x.Chapters
	}
	return nil
}

// 章节大纲项
type ChapterOutline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 章节索引
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// 章节标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 章节摘要
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// 章节目标描述
	Goal string `protobuf:"bytes,4,opt,name=goal,proto3" json:"goal,omitempty"`
	// 章节 Twist 提示
	TwistHint string `protobuf:"bytes,5,opt,name=twist_hint,json=twistHint,proto3" json:"twist_hint,omitempty"`
	// 章节重要物品列表
	ImportantItems []string `protobuf:"bytes,6,rep,name=important_items,json=importantItems,proto3" json:"important_items,omitempty"`
}

func (x *ChapterOutline) Reset() {
	*x = ChapterOutline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterOutline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterOutline) ProtoMessage() {}

func (x *ChapterOutline) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterOutline.ProtoReflect.Descriptor instead.
func (*ChapterOutline) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{46}
}

func (x *ChapterOutline) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChapterOutline) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterOutline) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ChapterOutline) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *ChapterOutline) GetTwistHint() string {
	if x != nil {
		return x.TwistHint
	}
	return ""
}

func (x *ChapterOutline) GetImportantItems() []string {
	if x != nil {
		return x.ImportantItems
	}
	return nil
}

// 章节
type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 章节ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目ID
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 章节索引
	Index int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// 章节标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 章节摘要
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// 原始内容
	RawContent string `protobuf:"bytes,6,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	//	polished_content = 7;
	//
	// 章节字数
	WordCount int32 `protobuf:"varint,8,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	// 章节状态：draft/generated/polished/reviewed
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{47}
}

func (x *Chapter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chapter) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Chapter) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Chapter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Chapter) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Chapter) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *Chapter) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *Chapter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Chapter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Chapter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 生成上下文
type GenerationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上一章节摘要
	PreviousSummary string `protobuf:"bytes,1,opt,name=previous_summary,json=previousSummary,proto3" json:"previous_summary,omitempty"`
	// 人物角色列表
	Characters []*Character `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	// 时间线事件列表
	Timeline []*TimelineEvent `protobuf:"bytes,3,rep,name=timeline,proto3" json:"timeline,omitempty"`
	// 道具物品列表
	Props []*PropItem `protobuf:"bytes,4,rep,name=props,proto3" json:"props,omitempty"`
	// 写作风格示例列表
	StyleExamples []string `protobuf:"bytes,5,rep,name=style_examples,json=styleExamples,proto3" json:"style_examples,omitempty"`
}

func (x *GenerationContext) Reset() {
	*x = GenerationContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationContext) ProtoMessage() {}

func (x *GenerationContext) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationContext.ProtoReflect.Descriptor instead.
func (*GenerationContext) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{48}
}

func (x *GenerationContext) GetPreviousSummary() string {
	if x != nil {
		return x.PreviousSummary
	}
	return ""
}

func (x *GenerationContext) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *GenerationContext) GetTimeline() []*TimelineEvent {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *GenerationContext) GetProps() []*PropItem {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *GenerationContext) GetStyleExamples() []string {
	if x != nil {
		return x.StyleExamples
	}
	return nil
}

// 时间线事件
type TimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 事件时间戳
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 事件描述
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// 事件详细描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TimelineEvent) Reset() {
	*x = TimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineEvent) ProtoMessage() {}

func (x *TimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineEvent.ProtoReflect.Descriptor instead.
func (*TimelineEvent) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{49}
}

func (x *TimelineEvent) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *TimelineEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TimelineEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 道具物品
type PropItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 道具物品名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 道具物品描述
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// 道具物品位置描述
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PropItem) Reset() {
	*x = PropItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropItem) ProtoMessage() {}

func (x *PropItem) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropItem.ProtoReflect.Descriptor instead.
func (*PropItem) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{50}
}

func (x *PropItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PropItem) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// 一致性问题
type ConsistencyIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 问题类型：character/plot/world/timeline
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 问题严重程度：low/medium/high/critical
	Severity string `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	// 问题描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 问题位置（章节索引/时间戳/道具名称等）
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// 建议修复方案
	Suggestion string `protobuf:"bytes,5,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
}

func (x *ConsistencyIssue) Reset() {
	*x = ConsistencyIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyIssue) ProtoMessage() {}

func (x *ConsistencyIssue) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyIssue.ProtoReflect.Descriptor instead.
func (*ConsistencyIssue) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{51}
}

func (x *ConsistencyIssue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConsistencyIssue) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ConsistencyIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConsistencyIssue) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConsistencyIssue) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

// 视频场景
type VideoScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 场景索引
	ScreenIndex int32 `protobuf:"varint,1,opt,name=screen_index,json=screenIndex,proto3" json:"screen_index,omitempty"`
	// 场景文本内容
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 建议背景音乐标签
	SuggestedBgmTag string `protobuf:"bytes,3,opt,name=suggested_bgm_tag,json=suggestedBgmTag,proto3" json:"suggested_bgm_tag,omitempty"`
	// 建议图片标签
	SuggestedImageTag string `protobuf:"bytes,4,opt,name=suggested_image_tag,json=suggestedImageTag,proto3" json:"suggested_image_tag,omitempty"`
	// 建议TTS语音类型：male/female
	TtsVoice string `protobuf:"bytes,5,opt,name=tts_voice,json=ttsVoice,proto3" json:"tts_voice,omitempty"`
	// 备注
	Notes string `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *VideoScene) Reset() {
	*x = VideoScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoScene) ProtoMessage() {}

func (x *VideoScene) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoScene.ProtoReflect.Descriptor instead.
func (*VideoScene) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{52}
}

func (x *VideoScene) GetScreenIndex() int32 {
	if x != nil {
		return x.ScreenIndex
	}
	return 0
}

func (x *VideoScene) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VideoScene) GetSuggestedBgmTag() string {
	if x != nil {
		return x.SuggestedBgmTag
	}
	return ""
}

func (x *VideoScene) GetSuggestedImageTag() string {
	if x != nil {
		return x.SuggestedImageTag
	}
	return ""
}

func (x *VideoScene) GetTtsVoice() string {
	if x != nil {
		return x.TtsVoice
	}
	return ""
}

func (x *VideoScene) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// 选项和配置
type LLMOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 温度参数，控制生成文本的随机性，默认0.7
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Top-p（nucleus sampling）参数，控制生成文本的多样性，默认0.9
	TopP float64 `protobuf:"fixed64,2,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	// 最大生成令牌数，默认2048
	MaxTokens int32 `protobuf:"varint,3,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// 频率惩罚参数，控制生成文本中重复令牌的惩罚，默认0.0
	FrequencyPenalty float64 `protobuf:"fixed64,4,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	// 存在惩罚参数，控制生成文本中新令牌的惩罚，默认0.0
	PresencePenalty float64 `protobuf:"fixed64,5,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	// 使用的模型名称，默认"default"
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *LLMOptions) Reset() {
	*x = LLMOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LLMOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMOptions) ProtoMessage() {}

func (x *LLMOptions) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMOptions.ProtoReflect.Descriptor instead.
func (*LLMOptions) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{53}
}

func (x *LLMOptions) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *LLMOptions) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *LLMOptions) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *LLMOptions) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *LLMOptions) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *LLMOptions) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// 生成选项
type GenerateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最大生成章节数，默认10
	MaxChapters int32 `protobuf:"varint,1,opt,name=max_chapters,json=maxChapters,proto3" json:"max_chapters,omitempty"`
	// 每章最大单词数，默认2000
	WordsPerChapter int32 `protobuf:"varint,2,opt,name=words_per_chapter,json=wordsPerChapter,proto3" json:"words_per_chapter,omitempty"`
	// 是否启用内容 polished，默认false
	PolishEnabled bool `protobuf:"varint,3,opt,name=polish_enabled,json=polishEnabled,proto3" json:"polish_enabled,omitempty"`
	// 是否启用一致性检查，默认false
	ConsistencyCheck bool `protobuf:"varint,4,opt,name=consistency_check,json=consistencyCheck,proto3" json:"consistency_check,omitempty"`
	// LLM 选项
	LlmOptions *LLMOptions `protobuf:"bytes,5,opt,name=llm_options,json=llmOptions,proto3" json:"llm_options,omitempty"`
}

func (x *GenerateOptions) Reset() {
	*x = GenerateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOptions) ProtoMessage() {}

func (x *GenerateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOptions.ProtoReflect.Descriptor instead.
func (*GenerateOptions) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{54}
}

func (x *GenerateOptions) GetMaxChapters() int32 {
	if x != nil {
		return x.MaxChapters
	}
	return 0
}

func (x *GenerateOptions) GetWordsPerChapter() int32 {
	if x != nil {
		return x.WordsPerChapter
	}
	return 0
}

func (x *GenerateOptions) GetPolishEnabled() bool {
	if x != nil {
		return x.PolishEnabled
	}
	return false
}

func (x *GenerateOptions) GetConsistencyCheck() bool {
	if x != nil {
		return x.ConsistencyCheck
	}
	return false
}

func (x *GenerateOptions) GetLlmOptions() *LLMOptions {
	if x != nil {
		return x.LlmOptions
	}
	return nil
}

// 模型切换相关消息
type SwitchModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模型名称，如 "default", "creative", "reasoning"
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *SwitchModelRequest) Reset() {
	*x = SwitchModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchModelRequest) ProtoMessage() {}

func (x *SwitchModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchModelRequest.ProtoReflect.Descriptor instead.
func (*SwitchModelRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{55}
}

func (x *SwitchModelRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

// 模型切换响应
type SwitchModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 切换是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 切换消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 当前使用的模型名称
	CurrentModel string `protobuf:"bytes,3,opt,name=current_model,json=currentModel,proto3" json:"current_model,omitempty"`
}

func (x *SwitchModelResponse) Reset() {
	*x = SwitchModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchModelResponse) ProtoMessage() {}

func (x *SwitchModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchModelResponse.ProtoReflect.Descriptor instead.
func (*SwitchModelResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{56}
}

func (x *SwitchModelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SwitchModelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwitchModelResponse) GetCurrentModel() string {
	if x != nil {
		return x.CurrentModel
	}
	return ""
}

// 模型列表请求
type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{57}
}

// 模型列表响应
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模型列表
	Models []*ModelInfo `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	// 当前使用的模型名称
	CurrentModel string `protobuf:"bytes,2,opt,name=current_model,json=currentModel,proto3" json:"current_model,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{58}
}

func (x *ListModelsResponse) GetModels() []*ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *ListModelsResponse) GetCurrentModel() string {
	if x != nil {
		return x.CurrentModel
	}
	return ""
}

// 模型信息
type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模型名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 模型供应商
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// 模型ID
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// 模型描述
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// 是否可用
	Available bool `protobuf:"varint,5,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{59}
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ModelInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ModelInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelInfo) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

// 导出选项
type ExportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否包含元数据，默认true
	IncludeMetadata bool `protobuf:"varint,1,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	// 是否包含大纲，默认true
	IncludeOutline bool `protobuf:"varint,2,opt,name=include_outline,json=includeOutline,proto3" json:"include_outline,omitempty"`
	// 字体家族，默认"宋体"
	FontFamily string `protobuf:"bytes,3,opt,name=font_family,json=fontFamily,proto3" json:"font_family,omitempty"`
	// 字体大小，默认14
	FontSize int32 `protobuf:"varint,4,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
}

func (x *ExportOptions) Reset() {
	*x = ExportOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportOptions) ProtoMessage() {}

func (x *ExportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportOptions.ProtoReflect.Descriptor instead.
func (*ExportOptions) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{60}
}

func (x *ExportOptions) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

func (x *ExportOptions) GetIncludeOutline() bool {
	if x != nil {
		return x.IncludeOutline
	}
	return false
}

func (x *ExportOptions) GetFontFamily() string {
	if x != nil {
		return x.FontFamily
	}
	return ""
}

func (x *ExportOptions) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

// 视频脚本选项
type VideoScriptOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每章分几个场景，默认8-12
	ScenesPerChapter int32 `protobuf:"varint,1,opt,name=scenes_per_chapter,json=scenesPerChapter,proto3" json:"scenes_per_chapter,omitempty"`
	// 视频平台：tiktok/youtube/bilibili
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// 语音类型：male/female/auto
	VoiceType string `protobuf:"bytes,3,opt,name=voice_type,json=voiceType,proto3" json:"voice_type,omitempty"`
}

func (x *VideoScriptOptions) Reset() {
	*x = VideoScriptOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoScriptOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoScriptOptions) ProtoMessage() {}

func (x *VideoScriptOptions) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoScriptOptions.ProtoReflect.Descriptor instead.
func (*VideoScriptOptions) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{61}
}

func (x *VideoScriptOptions) GetScenesPerChapter() int32 {
	if x != nil {
		return x.ScenesPerChapter
	}
	return 0
}

func (x *VideoScriptOptions) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *VideoScriptOptions) GetVoiceType() string {
	if x != nil {
		return x.VoiceType
	}
	return ""
}

// 统计信息请求
type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{62}
}

// 统计信息响应
type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 统计信息
	Stats *ProjectStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{63}
}

func (x *GetStatsResponse) GetStats() *ProjectStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 项目统计信息
type ProjectStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总项目数
	TotalProjects int32 `protobuf:"varint,1,opt,name=total_projects,json=totalProjects,proto3" json:"total_projects,omitempty"`
	// 已完成项目数
	CompletedProjects int32 `protobuf:"varint,2,opt,name=completed_projects,json=completedProjects,proto3" json:"completed_projects,omitempty"`
	// 总字数
	TotalWords int64 `protobuf:"varint,3,opt,name=total_words,json=totalWords,proto3" json:"total_words,omitempty"`
	// 本月字数
	MonthlyWords int64 `protobuf:"varint,4,opt,name=monthly_words,json=monthlyWords,proto3" json:"monthly_words,omitempty"`
}

func (x *ProjectStats) Reset() {
	*x = ProjectStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novel_v1_novel_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectStats) ProtoMessage() {}

func (x *ProjectStats) ProtoReflect() protoreflect.Message {
	mi := &file_novel_v1_novel_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectStats.ProtoReflect.Descriptor instead.
func (*ProjectStats) Descriptor() ([]byte, []int) {
	return file_novel_v1_novel_proto_rawDescGZIP(), []int{64}
}

func (x *ProjectStats) GetTotalProjects() int32 {
	if x != nil {
		return x.TotalProjects
	}
	return 0
}

func (x *ProjectStats) GetCompletedProjects() int32 {
	if x != nil {
		return x.CompletedProjects
	}
	return 0
}

func (x *ProjectStats) GetTotalWords() int64 {
	if x != nil {
		return x.TotalWords
	}
	return 0
}

func (x *ProjectStats) GetMonthlyWords() int64 {
	if x != nil {
		return x.MonthlyWords
	}
	return 0
}

var File_novel_v1_novel_proto protoreflect.FileDescriptor

var file_novel_v1_novel_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x46, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x44, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x22, 0xce, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51,
	0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xfc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x69, 0x73, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4b, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x4f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x4c, 0x0a, 0x1d, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x94,
	0x02, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x22, 0x83, 0x04,
	0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x22, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x04, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x55, 0x0a,
	0x15, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xf7, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x6f, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0e, 0x63, 0x72, 0x69, 0x74, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x01,
	0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x90,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0xba, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x42, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x42, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaf, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6c,
	0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x12, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x22, 0x8f, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70,
	0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70,
	0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6e, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xbe, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x53, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x77, 0x69, 0x73, 0x74, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x69, 0x73, 0x74,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcc, 0x02,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf9, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x67, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x67, 0x6d, 0x54,
	0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x74, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6f, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x35, 0x0a, 0x0b, 0x6c, 0x6c, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x4c, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6c, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x13, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x7d, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x32, 0xe6, 0x18, 0x0a, 0x0c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x73, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x22, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x76, 0x69, 0x65, 0x77, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x1a, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12,
	0xb3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x2a,
	0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a,
	0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x8b, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a,
	0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5e,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x9f,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x71, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x65, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x42, 0x0a, 0x17, 0x64, 0x65,
	0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_novel_v1_novel_proto_rawDescOnce sync.Once
	file_novel_v1_novel_proto_rawDescData = file_novel_v1_novel_proto_rawDesc
)

func file_novel_v1_novel_proto_rawDescGZIP() []byte {
	file_novel_v1_novel_proto_rawDescOnce.Do(func() {
		file_novel_v1_novel_proto_rawDescData = protoimpl.X.CompressGZIP(file_novel_v1_novel_proto_rawDescData)
	})
	return file_novel_v1_novel_proto_rawDescData
}

var file_novel_v1_novel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_novel_v1_novel_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_novel_v1_novel_proto_goTypes = []interface{}{
	(GenerateChapterStreamResponse_ResponseType)(0), // 0: novel.v1.GenerateChapterStreamResponse.ResponseType
	(*CreateProjectRequest)(nil),                    // 1: novel.v1.CreateProjectRequest
	(*CreateProjectResponse)(nil),                   // 2: novel.v1.CreateProjectResponse
	(*GetProjectRequest)(nil),                       // 3: novel.v1.GetProjectRequest
	(*GetProjectResponse)(nil),                      // 4: novel.v1.GetProjectResponse
	(*ListProjectsRequest)(nil),                     // 5: novel.v1.ListProjectsRequest
	(*ListProjectsResponse)(nil),                    // 6: novel.v1.ListProjectsResponse
	(*UpdateProjectRequest)(nil),                    // 7: novel.v1.UpdateProjectRequest
	(*UpdateProjectResponse)(nil),                   // 8: novel.v1.UpdateProjectResponse
	(*GenerateWorldViewRequest)(nil),                // 9: novel.v1.GenerateWorldViewRequest
	(*GenerateWorldViewResponse)(nil),               // 10: novel.v1.GenerateWorldViewResponse
	(*GenerateCharactersRequest)(nil),               // 11: novel.v1.GenerateCharactersRequest
	(*GenerateCharactersResponse)(nil),              // 12: novel.v1.GenerateCharactersResponse
	(*GenerateOutlineRequest)(nil),                  // 13: novel.v1.GenerateOutlineRequest
	(*GenerateOutlineResponse)(nil),                 // 14: novel.v1.GenerateOutlineResponse
	(*UpdateChapterOutlineRequest)(nil),             // 15: novel.v1.UpdateChapterOutlineRequest
	(*UpdateChapterOutlineResponse)(nil),            // 16: novel.v1.UpdateChapterOutlineResponse
	(*DeleteChapterOutlineRequest)(nil),             // 17: novel.v1.DeleteChapterOutlineRequest
	(*DeleteChapterOutlineResponse)(nil),            // 18: novel.v1.DeleteChapterOutlineResponse
	(*ReorderChapterOutlineRequest)(nil),            // 19: novel.v1.ReorderChapterOutlineRequest
	(*ChapterIndexMapping)(nil),                     // 20: novel.v1.ChapterIndexMapping
	(*ReorderChapterOutlineResponse)(nil),           // 21: novel.v1.ReorderChapterOutlineResponse
	(*GenerateChapterRequest)(nil),                  // 22: novel.v1.GenerateChapterRequest
	(*GenerateChapterResponse)(nil),                 // 23: novel.v1.GenerateChapterResponse
	(*GenerateChapterStreamResponse)(nil),           // 24: novel.v1.GenerateChapterStreamResponse
	(*PolishChapterRequest)(nil),                    // 25: novel.v1.PolishChapterRequest
	(*PolishChapterResponse)(nil),                   // 26: novel.v1.PolishChapterResponse
	(*CheckQualityRequest)(nil),                     // 27: novel.v1.CheckQualityRequest
	(*CheckQualityResponse)(nil),                    // 28: novel.v1.CheckQualityResponse
	(*BatchCheckQualityRequest)(nil),                // 29: novel.v1.BatchCheckQualityRequest
	(*BatchCheckQualityResponse)(nil),               // 30: novel.v1.BatchCheckQualityResponse
	(*ProofreadResult)(nil),                         // 31: novel.v1.ProofreadResult
	(*CritiqueResult)(nil),                          // 32: novel.v1.CritiqueResult
	(*QualityIssue)(nil),                            // 33: novel.v1.QualityIssue
	(*QualitySummary)(nil),                          // 34: novel.v1.QualitySummary
	(*CheckConsistencyRequest)(nil),                 // 35: novel.v1.CheckConsistencyRequest
	(*CheckConsistencyResponse)(nil),                // 36: novel.v1.CheckConsistencyResponse
	(*GenerateNovelRequest)(nil),                    // 37: novel.v1.GenerateNovelRequest
	(*GenerateNovelResponse)(nil),                   // 38: novel.v1.GenerateNovelResponse
	(*ExportNovelRequest)(nil),                      // 39: novel.v1.ExportNovelRequest
	(*ExportNovelResponse)(nil),                     // 40: novel.v1.ExportNovelResponse
	(*GenerateVideoScriptRequest)(nil),              // 41: novel.v1.GenerateVideoScriptRequest
	(*GenerateVideoScriptResponse)(nil),             // 42: novel.v1.GenerateVideoScriptResponse
	(*Project)(nil),                                 // 43: novel.v1.Project
	(*WorldView)(nil),                               // 44: novel.v1.WorldView
	(*Character)(nil),                               // 45: novel.v1.Character
	(*Outline)(nil),                                 // 46: novel.v1.Outline
	(*ChapterOutline)(nil),                          // 47: novel.v1.ChapterOutline
	(*Chapter)(nil),                                 // 48: novel.v1.Chapter
	(*GenerationContext)(nil),                       // 49: novel.v1.GenerationContext
	(*TimelineEvent)(nil),                           // 50: novel.v1.TimelineEvent
	(*PropItem)(nil),                                // 51: novel.v1.PropItem
	(*ConsistencyIssue)(nil),                        // 52: novel.v1.ConsistencyIssue
	(*VideoScene)(nil),                              // 53: novel.v1.VideoScene
	(*LLMOptions)(nil),                              // 54: novel.v1.LLMOptions
	(*GenerateOptions)(nil),                         // 55: novel.v1.GenerateOptions
	(*SwitchModelRequest)(nil),                      // 56: novel.v1.SwitchModelRequest
	(*SwitchModelResponse)(nil),                     // 57: novel.v1.SwitchModelResponse
	(*ListModelsRequest)(nil),                       // 58: novel.v1.ListModelsRequest
	(*ListModelsResponse)(nil),                      // 59: novel.v1.ListModelsResponse
	(*ModelInfo)(nil),                               // 60: novel.v1.ModelInfo
	(*ExportOptions)(nil),                           // 61: novel.v1.ExportOptions
	(*VideoScriptOptions)(nil),                      // 62: novel.v1.VideoScriptOptions
	(*GetStatsRequest)(nil),                         // 63: novel.v1.GetStatsRequest
	(*GetStatsResponse)(nil),                        // 64: novel.v1.GetStatsResponse
	(*ProjectStats)(nil),                            // 65: novel.v1.ProjectStats
	nil,                                             // 66: novel.v1.QualitySummary.IssuesByTypeEntry
	nil,                                             // 67: novel.v1.QualitySummary.IssuesBySeverityEntry
	nil,                                             // 68: novel.v1.Character.RelationshipMapEntry
	(*timestamppb.Timestamp)(nil),                   // 69: google.protobuf.Timestamp
}
var file_novel_v1_novel_proto_depIdxs = []int32{
	69, // 0: novel.v1.CreateProjectResponse.created_at:type_name -> google.protobuf.Timestamp
	43, // 1: novel.v1.GetProjectResponse.project:type_name -> novel.v1.Project
	43, // 2: novel.v1.ListProjectsResponse.projects:type_name -> novel.v1.Project
	46, // 3: novel.v1.UpdateProjectRequest.outline:type_name -> novel.v1.Outline
	43, // 4: novel.v1.UpdateProjectResponse.project:type_name -> novel.v1.Project
	54, // 5: novel.v1.GenerateWorldViewRequest.llm_options:type_name -> novel.v1.LLMOptions
	44, // 6: novel.v1.GenerateWorldViewResponse.world_view:type_name -> novel.v1.WorldView
	44, // 7: novel.v1.GenerateCharactersRequest.world_view:type_name -> novel.v1.WorldView
	54, // 8: novel.v1.GenerateCharactersRequest.llm_options:type_name -> novel.v1.LLMOptions
	45, // 9: novel.v1.GenerateCharactersResponse.characters:type_name -> novel.v1.Character
	44, // 10: novel.v1.GenerateOutlineRequest.world_view:type_name -> novel.v1.WorldView
	45, // 11: novel.v1.GenerateOutlineRequest.characters:type_name -> novel.v1.Character
	54, // 12: novel.v1.GenerateOutlineRequest.llm_options:type_name -> novel.v1.LLMOptions
	46, // 13: novel.v1.GenerateOutlineResponse.outline:type_name -> novel.v1.Outline
	46, // 14: novel.v1.UpdateChapterOutlineResponse.outline:type_name -> novel.v1.Outline
	46, // 15: novel.v1.DeleteChapterOutlineResponse.outline:type_name -> novel.v1.Outline
	20, // 16: novel.v1.ReorderChapterOutlineRequest.chapter_mappings:type_name -> novel.v1.ChapterIndexMapping
	46, // 17: novel.v1.ReorderChapterOutlineResponse.outline:type_name -> novel.v1.Outline
	47, // 18: novel.v1.GenerateChapterRequest.chapter_outline:type_name -> novel.v1.ChapterOutline
	49, // 19: novel.v1.GenerateChapterRequest.context:type_name -> novel.v1.GenerationContext
	54, // 20: novel.v1.GenerateChapterRequest.llm_options:type_name -> novel.v1.LLMOptions
	48, // 21: novel.v1.GenerateChapterResponse.chapter:type_name -> novel.v1.Chapter
	0,  // 22: novel.v1.GenerateChapterStreamResponse.type:type_name -> novel.v1.GenerateChapterStreamResponse.ResponseType
	48, // 23: novel.v1.GenerateChapterStreamResponse.final_chapter:type_name -> novel.v1.Chapter
	54, // 24: novel.v1.PolishChapterRequest.llm_options:type_name -> novel.v1.LLMOptions
	48, // 25: novel.v1.PolishChapterResponse.polished_chapter:type_name -> novel.v1.Chapter
	54, // 26: novel.v1.CheckQualityRequest.llm_options:type_name -> novel.v1.LLMOptions
	48, // 27: novel.v1.CheckQualityResponse.polished_chapter:type_name -> novel.v1.Chapter
	31, // 28: novel.v1.CheckQualityResponse.proofread_result:type_name -> novel.v1.ProofreadResult
	32, // 29: novel.v1.CheckQualityResponse.critique_result:type_name -> novel.v1.CritiqueResult
	52, // 30: novel.v1.CheckQualityResponse.consistency_issues:type_name -> novel.v1.ConsistencyIssue
	54, // 31: novel.v1.BatchCheckQualityRequest.llm_options:type_name -> novel.v1.LLMOptions
	28, // 32: novel.v1.BatchCheckQualityResponse.results:type_name -> novel.v1.CheckQualityResponse
	34, // 33: novel.v1.BatchCheckQualityResponse.summary:type_name -> novel.v1.QualitySummary
	33, // 34: novel.v1.ProofreadResult.issues:type_name -> novel.v1.QualityIssue
	66, // 35: novel.v1.QualitySummary.issues_by_type:type_name -> novel.v1.QualitySummary.IssuesByTypeEntry
	67, // 36: novel.v1.QualitySummary.issues_by_severity:type_name -> novel.v1.QualitySummary.IssuesBySeverityEntry
	54, // 37: novel.v1.CheckConsistencyRequest.llm_options:type_name -> novel.v1.LLMOptions
	52, // 38: novel.v1.CheckConsistencyResponse.issues:type_name -> novel.v1.ConsistencyIssue
	55, // 39: novel.v1.GenerateNovelRequest.options:type_name -> novel.v1.GenerateOptions
	48, // 40: novel.v1.GenerateNovelResponse.chapters:type_name -> novel.v1.Chapter
	61, // 41: novel.v1.ExportNovelRequest.options:type_name -> novel.v1.ExportOptions
	62, // 42: novel.v1.GenerateVideoScriptRequest.options:type_name -> novel.v1.VideoScriptOptions
	53, // 43: novel.v1.GenerateVideoScriptResponse.scenes:type_name -> novel.v1.VideoScene
	44, // 44: novel.v1.Project.world_view:type_name -> novel.v1.WorldView
	45, // 45: novel.v1.Project.characters:type_name -> novel.v1.Character
	46, // 46: novel.v1.Project.outline:type_name -> novel.v1.Outline
	48, // 47: novel.v1.Project.chapters:type_name -> novel.v1.Chapter
	69, // 48: novel.v1.Project.created_at:type_name -> google.protobuf.Timestamp
	69, // 49: novel.v1.Project.updated_at:type_name -> google.protobuf.Timestamp
	68, // 50: novel.v1.Character.relationship_map:type_name -> novel.v1.Character.RelationshipMapEntry
	47, // 51: novel.v1.Outline.chapters:type_name -> novel.v1.ChapterOutline
	69, // 52: novel.v1.Chapter.created_at:type_name -> google.protobuf.Timestamp
	69, // 53: novel.v1.Chapter.updated_at:type_name -> google.protobuf.Timestamp
	45, // 54: novel.v1.GenerationContext.characters:type_name -> novel.v1.Character
	50, // 55: novel.v1.GenerationContext.timeline:type_name -> novel.v1.TimelineEvent
	51, // 56: novel.v1.GenerationContext.props:type_name -> novel.v1.PropItem
	54, // 57: novel.v1.GenerateOptions.llm_options:type_name -> novel.v1.LLMOptions
	60, // 58: novel.v1.ListModelsResponse.models:type_name -> novel.v1.ModelInfo
	65, // 59: novel.v1.GetStatsResponse.stats:type_name -> novel.v1.ProjectStats
	1,  // 60: novel.v1.NovelService.CreateProject:input_type -> novel.v1.CreateProjectRequest
	3,  // 61: novel.v1.NovelService.GetProject:input_type -> novel.v1.GetProjectRequest
	5,  // 62: novel.v1.NovelService.ListProjects:input_type -> novel.v1.ListProjectsRequest
	7,  // 63: novel.v1.NovelService.UpdateProject:input_type -> novel.v1.UpdateProjectRequest
	9,  // 64: novel.v1.NovelService.GenerateWorldView:input_type -> novel.v1.GenerateWorldViewRequest
	11, // 65: novel.v1.NovelService.GenerateCharacters:input_type -> novel.v1.GenerateCharactersRequest
	13, // 66: novel.v1.NovelService.GenerateOutline:input_type -> novel.v1.GenerateOutlineRequest
	15, // 67: novel.v1.NovelService.UpdateChapterOutline:input_type -> novel.v1.UpdateChapterOutlineRequest
	17, // 68: novel.v1.NovelService.DeleteChapterOutline:input_type -> novel.v1.DeleteChapterOutlineRequest
	19, // 69: novel.v1.NovelService.ReorderChapterOutline:input_type -> novel.v1.ReorderChapterOutlineRequest
	22, // 70: novel.v1.NovelService.GenerateChapter:input_type -> novel.v1.GenerateChapterRequest
	22, // 71: novel.v1.NovelService.GenerateChapterStream:input_type -> novel.v1.GenerateChapterRequest
	25, // 72: novel.v1.NovelService.PolishChapter:input_type -> novel.v1.PolishChapterRequest
	27, // 73: novel.v1.NovelService.CheckQuality:input_type -> novel.v1.CheckQualityRequest
	29, // 74: novel.v1.NovelService.BatchCheckQuality:input_type -> novel.v1.BatchCheckQualityRequest
	35, // 75: novel.v1.NovelService.CheckConsistency:input_type -> novel.v1.CheckConsistencyRequest
	37, // 76: novel.v1.NovelService.GenerateNovel:input_type -> novel.v1.GenerateNovelRequest
	39, // 77: novel.v1.NovelService.ExportNovel:input_type -> novel.v1.ExportNovelRequest
	63, // 78: novel.v1.NovelService.GetStats:input_type -> novel.v1.GetStatsRequest
	41, // 79: novel.v1.NovelService.GenerateVideoScript:input_type -> novel.v1.GenerateVideoScriptRequest
	56, // 80: novel.v1.NovelService.SwitchModel:input_type -> novel.v1.SwitchModelRequest
	58, // 81: novel.v1.NovelService.ListModels:input_type -> novel.v1.ListModelsRequest
	2,  // 82: novel.v1.NovelService.CreateProject:output_type -> novel.v1.CreateProjectResponse
	4,  // 83: novel.v1.NovelService.GetProject:output_type -> novel.v1.GetProjectResponse
	6,  // 84: novel.v1.NovelService.ListProjects:output_type -> novel.v1.ListProjectsResponse
	8,  // 85: novel.v1.NovelService.UpdateProject:output_type -> novel.v1.UpdateProjectResponse
	10, // 86: novel.v1.NovelService.GenerateWorldView:output_type -> novel.v1.GenerateWorldViewResponse
	12, // 87: novel.v1.NovelService.GenerateCharacters:output_type -> novel.v1.GenerateCharactersResponse
	14, // 88: novel.v1.NovelService.GenerateOutline:output_type -> novel.v1.GenerateOutlineResponse
	16, // 89: novel.v1.NovelService.UpdateChapterOutline:output_type -> novel.v1.UpdateChapterOutlineResponse
	18, // 90: novel.v1.NovelService.DeleteChapterOutline:output_type -> novel.v1.DeleteChapterOutlineResponse
	21, // 91: novel.v1.NovelService.ReorderChapterOutline:output_type -> novel.v1.ReorderChapterOutlineResponse
	23, // 92: novel.v1.NovelService.GenerateChapter:output_type -> novel.v1.GenerateChapterResponse
	24, // 93: novel.v1.NovelService.GenerateChapterStream:output_type -> novel.v1.GenerateChapterStreamResponse
	26, // 94: novel.v1.NovelService.PolishChapter:output_type -> novel.v1.PolishChapterResponse
	28, // 95: novel.v1.NovelService.CheckQuality:output_type -> novel.v1.CheckQualityResponse
	30, // 96: novel.v1.NovelService.BatchCheckQuality:output_type -> novel.v1.BatchCheckQualityResponse
	36, // 97: novel.v1.NovelService.CheckConsistency:output_type -> novel.v1.CheckConsistencyResponse
	38, // 98: novel.v1.NovelService.GenerateNovel:output_type -> novel.v1.GenerateNovelResponse
	40, // 99: novel.v1.NovelService.ExportNovel:output_type -> novel.v1.ExportNovelResponse
	64, // 100: novel.v1.NovelService.GetStats:output_type -> novel.v1.GetStatsResponse
	42, // 101: novel.v1.NovelService.GenerateVideoScript:output_type -> novel.v1.GenerateVideoScriptResponse
	57, // 102: novel.v1.NovelService.SwitchModel:output_type -> novel.v1.SwitchModelResponse
	59, // 103: novel.v1.NovelService.ListModels:output_type -> novel.v1.ListModelsResponse
	82, // [82:104] is the sub-list for method output_type
	60, // [60:82] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_novel_v1_novel_proto_init() }
func file_novel_v1_novel_proto_init() {
	if File_novel_v1_novel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_novel_v1_novel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWorldViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateWorldViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCharactersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCharactersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOutlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOutlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChapterOutlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChapterOutlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChapterOutlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChapterOutlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderChapterOutlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterIndexMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderChapterOutlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateChapterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateChapterStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolishChapterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolishChapterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCheckQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCheckQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofreadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CritiqueResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualitySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConsistencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConsistencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNovelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportNovelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateVideoScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateVideoScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterOutline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerationContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LLMOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoScriptOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novel_v1_novel_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_novel_v1_novel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_novel_v1_novel_proto_goTypes,
		DependencyIndexes: file_novel_v1_novel_proto_depIdxs,
		EnumInfos:         file_novel_v1_novel_proto_enumTypes,
		MessageInfos:      file_novel_v1_novel_proto_msgTypes,
	}.Build()
	File_novel_v1_novel_proto = out.File
	file_novel_v1_novel_proto_rawDesc = nil
	file_novel_v1_novel_proto_goTypes = nil
	file_novel_v1_novel_proto_depIdxs = nil
}
