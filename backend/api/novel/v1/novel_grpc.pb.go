// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: novel/v1/novel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NovelService_CreateProject_FullMethodName        = "/novel.v1.NovelService/CreateProject"
	NovelService_GetProject_FullMethodName           = "/novel.v1.NovelService/GetProject"
	NovelService_ListProjects_FullMethodName         = "/novel.v1.NovelService/ListProjects"
	NovelService_UpdateProject_FullMethodName        = "/novel.v1.NovelService/UpdateProject"
	NovelService_GenerateWorldView_FullMethodName    = "/novel.v1.NovelService/GenerateWorldView"
	NovelService_GenerateCharacters_FullMethodName   = "/novel.v1.NovelService/GenerateCharacters"
	NovelService_GenerateOutline_FullMethodName      = "/novel.v1.NovelService/GenerateOutline"
	NovelService_UpdateChapterOutline_FullMethodName = "/novel.v1.NovelService/UpdateChapterOutline"
	NovelService_GenerateChapter_FullMethodName      = "/novel.v1.NovelService/GenerateChapter"
	NovelService_PolishChapter_FullMethodName        = "/novel.v1.NovelService/PolishChapter"
	NovelService_CheckQuality_FullMethodName         = "/novel.v1.NovelService/CheckQuality"
	NovelService_BatchCheckQuality_FullMethodName    = "/novel.v1.NovelService/BatchCheckQuality"
	NovelService_CheckConsistency_FullMethodName     = "/novel.v1.NovelService/CheckConsistency"
	NovelService_GenerateNovel_FullMethodName        = "/novel.v1.NovelService/GenerateNovel"
	NovelService_ExportNovel_FullMethodName          = "/novel.v1.NovelService/ExportNovel"
	NovelService_GetStats_FullMethodName             = "/novel.v1.NovelService/GetStats"
	NovelService_GenerateVideoScript_FullMethodName  = "/novel.v1.NovelService/GenerateVideoScript"
	NovelService_SwitchModel_FullMethodName          = "/novel.v1.NovelService/SwitchModel"
	NovelService_ListModels_FullMethodName           = "/novel.v1.NovelService/ListModels"
)

// NovelServiceClient is the client API for NovelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelServiceClient interface {
	// 创建小说项目
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// 获取项目详情
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// 列出项目
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// 更新项目
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// 生成世界观
	GenerateWorldView(ctx context.Context, in *GenerateWorldViewRequest, opts ...grpc.CallOption) (*GenerateWorldViewResponse, error)
	// 生成人物卡
	GenerateCharacters(ctx context.Context, in *GenerateCharactersRequest, opts ...grpc.CallOption) (*GenerateCharactersResponse, error)
	// 生成章节大纲
	GenerateOutline(ctx context.Context, in *GenerateOutlineRequest, opts ...grpc.CallOption) (*GenerateOutlineResponse, error)
	// 更新章节大纲
	UpdateChapterOutline(ctx context.Context, in *UpdateChapterOutlineRequest, opts ...grpc.CallOption) (*UpdateChapterOutlineResponse, error)
	// 生成章节内容
	GenerateChapter(ctx context.Context, in *GenerateChapterRequest, opts ...grpc.CallOption) (*GenerateChapterResponse, error)
	// 润色章节
	PolishChapter(ctx context.Context, in *PolishChapterRequest, opts ...grpc.CallOption) (*PolishChapterResponse, error)
	// 质量检测
	CheckQuality(ctx context.Context, in *CheckQualityRequest, opts ...grpc.CallOption) (*CheckQualityResponse, error)
	// 批量质量检测
	BatchCheckQuality(ctx context.Context, in *BatchCheckQualityRequest, opts ...grpc.CallOption) (*BatchCheckQualityResponse, error)
	// 一致性检查
	CheckConsistency(ctx context.Context, in *CheckConsistencyRequest, opts ...grpc.CallOption) (*CheckConsistencyResponse, error)
	// 生成完整小说（工作流）
	GenerateNovel(ctx context.Context, in *GenerateNovelRequest, opts ...grpc.CallOption) (NovelService_GenerateNovelClient, error)
	// 导出小说
	ExportNovel(ctx context.Context, in *ExportNovelRequest, opts ...grpc.CallOption) (*ExportNovelResponse, error)
	// 获取统计信息
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// 生成短视频分镜脚本
	GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...grpc.CallOption) (*GenerateVideoScriptResponse, error)
	// 切换AI模型
	SwitchModel(ctx context.Context, in *SwitchModelRequest, opts ...grpc.CallOption) (*SwitchModelResponse, error)
	// 获取可用模型列表
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
}

type novelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelServiceClient(cc grpc.ClientConnInterface) NovelServiceClient {
	return &novelServiceClient{cc}
}

func (c *novelServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, NovelService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, NovelService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, NovelService_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, NovelService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateWorldView(ctx context.Context, in *GenerateWorldViewRequest, opts ...grpc.CallOption) (*GenerateWorldViewResponse, error) {
	out := new(GenerateWorldViewResponse)
	err := c.cc.Invoke(ctx, NovelService_GenerateWorldView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateCharacters(ctx context.Context, in *GenerateCharactersRequest, opts ...grpc.CallOption) (*GenerateCharactersResponse, error) {
	out := new(GenerateCharactersResponse)
	err := c.cc.Invoke(ctx, NovelService_GenerateCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateOutline(ctx context.Context, in *GenerateOutlineRequest, opts ...grpc.CallOption) (*GenerateOutlineResponse, error) {
	out := new(GenerateOutlineResponse)
	err := c.cc.Invoke(ctx, NovelService_GenerateOutline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) UpdateChapterOutline(ctx context.Context, in *UpdateChapterOutlineRequest, opts ...grpc.CallOption) (*UpdateChapterOutlineResponse, error) {
	out := new(UpdateChapterOutlineResponse)
	err := c.cc.Invoke(ctx, NovelService_UpdateChapterOutline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateChapter(ctx context.Context, in *GenerateChapterRequest, opts ...grpc.CallOption) (*GenerateChapterResponse, error) {
	out := new(GenerateChapterResponse)
	err := c.cc.Invoke(ctx, NovelService_GenerateChapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) PolishChapter(ctx context.Context, in *PolishChapterRequest, opts ...grpc.CallOption) (*PolishChapterResponse, error) {
	out := new(PolishChapterResponse)
	err := c.cc.Invoke(ctx, NovelService_PolishChapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) CheckQuality(ctx context.Context, in *CheckQualityRequest, opts ...grpc.CallOption) (*CheckQualityResponse, error) {
	out := new(CheckQualityResponse)
	err := c.cc.Invoke(ctx, NovelService_CheckQuality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) BatchCheckQuality(ctx context.Context, in *BatchCheckQualityRequest, opts ...grpc.CallOption) (*BatchCheckQualityResponse, error) {
	out := new(BatchCheckQualityResponse)
	err := c.cc.Invoke(ctx, NovelService_BatchCheckQuality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) CheckConsistency(ctx context.Context, in *CheckConsistencyRequest, opts ...grpc.CallOption) (*CheckConsistencyResponse, error) {
	out := new(CheckConsistencyResponse)
	err := c.cc.Invoke(ctx, NovelService_CheckConsistency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateNovel(ctx context.Context, in *GenerateNovelRequest, opts ...grpc.CallOption) (NovelService_GenerateNovelClient, error) {
	stream, err := c.cc.NewStream(ctx, &NovelService_ServiceDesc.Streams[0], NovelService_GenerateNovel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &novelServiceGenerateNovelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NovelService_GenerateNovelClient interface {
	Recv() (*GenerateNovelResponse, error)
	grpc.ClientStream
}

type novelServiceGenerateNovelClient struct {
	grpc.ClientStream
}

func (x *novelServiceGenerateNovelClient) Recv() (*GenerateNovelResponse, error) {
	m := new(GenerateNovelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *novelServiceClient) ExportNovel(ctx context.Context, in *ExportNovelRequest, opts ...grpc.CallOption) (*ExportNovelResponse, error) {
	out := new(ExportNovelResponse)
	err := c.cc.Invoke(ctx, NovelService_ExportNovel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, NovelService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...grpc.CallOption) (*GenerateVideoScriptResponse, error) {
	out := new(GenerateVideoScriptResponse)
	err := c.cc.Invoke(ctx, NovelService_GenerateVideoScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) SwitchModel(ctx context.Context, in *SwitchModelRequest, opts ...grpc.CallOption) (*SwitchModelResponse, error) {
	out := new(SwitchModelResponse)
	err := c.cc.Invoke(ctx, NovelService_SwitchModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, NovelService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelServiceServer is the server API for NovelService service.
// All implementations must embed UnimplementedNovelServiceServer
// for forward compatibility
type NovelServiceServer interface {
	// 创建小说项目
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// 获取项目详情
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// 列出项目
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// 更新项目
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// 生成世界观
	GenerateWorldView(context.Context, *GenerateWorldViewRequest) (*GenerateWorldViewResponse, error)
	// 生成人物卡
	GenerateCharacters(context.Context, *GenerateCharactersRequest) (*GenerateCharactersResponse, error)
	// 生成章节大纲
	GenerateOutline(context.Context, *GenerateOutlineRequest) (*GenerateOutlineResponse, error)
	// 更新章节大纲
	UpdateChapterOutline(context.Context, *UpdateChapterOutlineRequest) (*UpdateChapterOutlineResponse, error)
	// 生成章节内容
	GenerateChapter(context.Context, *GenerateChapterRequest) (*GenerateChapterResponse, error)
	// 润色章节
	PolishChapter(context.Context, *PolishChapterRequest) (*PolishChapterResponse, error)
	// 质量检测
	CheckQuality(context.Context, *CheckQualityRequest) (*CheckQualityResponse, error)
	// 批量质量检测
	BatchCheckQuality(context.Context, *BatchCheckQualityRequest) (*BatchCheckQualityResponse, error)
	// 一致性检查
	CheckConsistency(context.Context, *CheckConsistencyRequest) (*CheckConsistencyResponse, error)
	// 生成完整小说（工作流）
	GenerateNovel(*GenerateNovelRequest, NovelService_GenerateNovelServer) error
	// 导出小说
	ExportNovel(context.Context, *ExportNovelRequest) (*ExportNovelResponse, error)
	// 获取统计信息
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// 生成短视频分镜脚本
	GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error)
	// 切换AI模型
	SwitchModel(context.Context, *SwitchModelRequest) (*SwitchModelResponse, error)
	// 获取可用模型列表
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	mustEmbedUnimplementedNovelServiceServer()
}

// UnimplementedNovelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNovelServiceServer struct {
}

func (UnimplementedNovelServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedNovelServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedNovelServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedNovelServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedNovelServiceServer) GenerateWorldView(context.Context, *GenerateWorldViewRequest) (*GenerateWorldViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWorldView not implemented")
}
func (UnimplementedNovelServiceServer) GenerateCharacters(context.Context, *GenerateCharactersRequest) (*GenerateCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCharacters not implemented")
}
func (UnimplementedNovelServiceServer) GenerateOutline(context.Context, *GenerateOutlineRequest) (*GenerateOutlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOutline not implemented")
}
func (UnimplementedNovelServiceServer) UpdateChapterOutline(context.Context, *UpdateChapterOutlineRequest) (*UpdateChapterOutlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChapterOutline not implemented")
}
func (UnimplementedNovelServiceServer) GenerateChapter(context.Context, *GenerateChapterRequest) (*GenerateChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateChapter not implemented")
}
func (UnimplementedNovelServiceServer) PolishChapter(context.Context, *PolishChapterRequest) (*PolishChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolishChapter not implemented")
}
func (UnimplementedNovelServiceServer) CheckQuality(context.Context, *CheckQualityRequest) (*CheckQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuality not implemented")
}
func (UnimplementedNovelServiceServer) BatchCheckQuality(context.Context, *BatchCheckQualityRequest) (*BatchCheckQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckQuality not implemented")
}
func (UnimplementedNovelServiceServer) CheckConsistency(context.Context, *CheckConsistencyRequest) (*CheckConsistencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConsistency not implemented")
}
func (UnimplementedNovelServiceServer) GenerateNovel(*GenerateNovelRequest, NovelService_GenerateNovelServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateNovel not implemented")
}
func (UnimplementedNovelServiceServer) ExportNovel(context.Context, *ExportNovelRequest) (*ExportNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportNovel not implemented")
}
func (UnimplementedNovelServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedNovelServiceServer) GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideoScript not implemented")
}
func (UnimplementedNovelServiceServer) SwitchModel(context.Context, *SwitchModelRequest) (*SwitchModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchModel not implemented")
}
func (UnimplementedNovelServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedNovelServiceServer) mustEmbedUnimplementedNovelServiceServer() {}

// UnsafeNovelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelServiceServer will
// result in compilation errors.
type UnsafeNovelServiceServer interface {
	mustEmbedUnimplementedNovelServiceServer()
}

func RegisterNovelServiceServer(s grpc.ServiceRegistrar, srv NovelServiceServer) {
	s.RegisterService(&NovelService_ServiceDesc, srv)
}

func _NovelService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateWorldView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWorldViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GenerateWorldView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GenerateWorldView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GenerateWorldView(ctx, req.(*GenerateWorldViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GenerateCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GenerateCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GenerateCharacters(ctx, req.(*GenerateCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateOutline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOutlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GenerateOutline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GenerateOutline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GenerateOutline(ctx, req.(*GenerateOutlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_UpdateChapterOutline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChapterOutlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).UpdateChapterOutline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_UpdateChapterOutline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).UpdateChapterOutline(ctx, req.(*UpdateChapterOutlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GenerateChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GenerateChapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GenerateChapter(ctx, req.(*GenerateChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_PolishChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolishChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).PolishChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_PolishChapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).PolishChapter(ctx, req.(*PolishChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_CheckQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).CheckQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_CheckQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).CheckQuality(ctx, req.(*CheckQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_BatchCheckQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).BatchCheckQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_BatchCheckQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).BatchCheckQuality(ctx, req.(*BatchCheckQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_CheckConsistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConsistencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).CheckConsistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_CheckConsistency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).CheckConsistency(ctx, req.(*CheckConsistencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateNovel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateNovelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NovelServiceServer).GenerateNovel(m, &novelServiceGenerateNovelServer{stream})
}

type NovelService_GenerateNovelServer interface {
	Send(*GenerateNovelResponse) error
	grpc.ServerStream
}

type novelServiceGenerateNovelServer struct {
	grpc.ServerStream
}

func (x *novelServiceGenerateNovelServer) Send(m *GenerateNovelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NovelService_ExportNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).ExportNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_ExportNovel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).ExportNovel(ctx, req.(*ExportNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_GenerateVideoScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVideoScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).GenerateVideoScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_GenerateVideoScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).GenerateVideoScript(ctx, req.(*GenerateVideoScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_SwitchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).SwitchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_SwitchModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).SwitchModel(ctx, req.(*SwitchModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NovelService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelService_ServiceDesc is the grpc.ServiceDesc for NovelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novel.v1.NovelService",
	HandlerType: (*NovelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _NovelService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _NovelService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _NovelService_ListProjects_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _NovelService_UpdateProject_Handler,
		},
		{
			MethodName: "GenerateWorldView",
			Handler:    _NovelService_GenerateWorldView_Handler,
		},
		{
			MethodName: "GenerateCharacters",
			Handler:    _NovelService_GenerateCharacters_Handler,
		},
		{
			MethodName: "GenerateOutline",
			Handler:    _NovelService_GenerateOutline_Handler,
		},
		{
			MethodName: "UpdateChapterOutline",
			Handler:    _NovelService_UpdateChapterOutline_Handler,
		},
		{
			MethodName: "GenerateChapter",
			Handler:    _NovelService_GenerateChapter_Handler,
		},
		{
			MethodName: "PolishChapter",
			Handler:    _NovelService_PolishChapter_Handler,
		},
		{
			MethodName: "CheckQuality",
			Handler:    _NovelService_CheckQuality_Handler,
		},
		{
			MethodName: "BatchCheckQuality",
			Handler:    _NovelService_BatchCheckQuality_Handler,
		},
		{
			MethodName: "CheckConsistency",
			Handler:    _NovelService_CheckConsistency_Handler,
		},
		{
			MethodName: "ExportNovel",
			Handler:    _NovelService_ExportNovel_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _NovelService_GetStats_Handler,
		},
		{
			MethodName: "GenerateVideoScript",
			Handler:    _NovelService_GenerateVideoScript_Handler,
		},
		{
			MethodName: "SwitchModel",
			Handler:    _NovelService_SwitchModel_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _NovelService_ListModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateNovel",
			Handler:       _NovelService_GenerateNovel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "novel/v1/novel.proto",
}
