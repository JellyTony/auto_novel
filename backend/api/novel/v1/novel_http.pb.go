// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.29.0
// source: novel/v1/novel.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNovelServiceBatchCheckQuality = "/novel.v1.NovelService/BatchCheckQuality"
const OperationNovelServiceCheckConsistency = "/novel.v1.NovelService/CheckConsistency"
const OperationNovelServiceCheckQuality = "/novel.v1.NovelService/CheckQuality"
const OperationNovelServiceCreateProject = "/novel.v1.NovelService/CreateProject"
const OperationNovelServiceDeleteChapterOutline = "/novel.v1.NovelService/DeleteChapterOutline"
const OperationNovelServiceExportNovel = "/novel.v1.NovelService/ExportNovel"
const OperationNovelServiceGenerateChapter = "/novel.v1.NovelService/GenerateChapter"
const OperationNovelServiceGenerateCharacters = "/novel.v1.NovelService/GenerateCharacters"
const OperationNovelServiceGenerateOutline = "/novel.v1.NovelService/GenerateOutline"
const OperationNovelServiceGenerateVideoScript = "/novel.v1.NovelService/GenerateVideoScript"
const OperationNovelServiceGenerateWorldView = "/novel.v1.NovelService/GenerateWorldView"
const OperationNovelServiceGetProject = "/novel.v1.NovelService/GetProject"
const OperationNovelServiceGetStats = "/novel.v1.NovelService/GetStats"
const OperationNovelServiceListModels = "/novel.v1.NovelService/ListModels"
const OperationNovelServiceListProjects = "/novel.v1.NovelService/ListProjects"
const OperationNovelServicePolishChapter = "/novel.v1.NovelService/PolishChapter"
const OperationNovelServiceReorderChapterOutline = "/novel.v1.NovelService/ReorderChapterOutline"
const OperationNovelServiceSwitchModel = "/novel.v1.NovelService/SwitchModel"
const OperationNovelServiceUpdateChapterOutline = "/novel.v1.NovelService/UpdateChapterOutline"
const OperationNovelServiceUpdateProject = "/novel.v1.NovelService/UpdateProject"

type NovelServiceHTTPServer interface {
	// BatchCheckQuality 批量质量检测
	BatchCheckQuality(context.Context, *BatchCheckQualityRequest) (*BatchCheckQualityResponse, error)
	// CheckConsistency 一致性检查
	CheckConsistency(context.Context, *CheckConsistencyRequest) (*CheckConsistencyResponse, error)
	// CheckQuality 质量检测
	CheckQuality(context.Context, *CheckQualityRequest) (*CheckQualityResponse, error)
	// CreateProject 创建小说项目
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// DeleteChapterOutline 删除章节大纲
	DeleteChapterOutline(context.Context, *DeleteChapterOutlineRequest) (*DeleteChapterOutlineResponse, error)
	// ExportNovel 导出小说
	ExportNovel(context.Context, *ExportNovelRequest) (*ExportNovelResponse, error)
	// GenerateChapter 生成章节内容
	GenerateChapter(context.Context, *GenerateChapterRequest) (*GenerateChapterResponse, error)
	// GenerateCharacters 生成人物卡
	GenerateCharacters(context.Context, *GenerateCharactersRequest) (*GenerateCharactersResponse, error)
	// GenerateOutline 生成章节大纲
	GenerateOutline(context.Context, *GenerateOutlineRequest) (*GenerateOutlineResponse, error)
	// GenerateVideoScript 生成短视频分镜脚本
	GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error)
	// GenerateWorldView 生成世界观
	GenerateWorldView(context.Context, *GenerateWorldViewRequest) (*GenerateWorldViewResponse, error)
	// GetProject 获取项目详情
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// GetStats 获取统计信息
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// ListModels 获取可用模型列表
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// ListProjects 列出项目
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// PolishChapter 润色章节
	PolishChapter(context.Context, *PolishChapterRequest) (*PolishChapterResponse, error)
	// ReorderChapterOutline 重排序章节大纲
	ReorderChapterOutline(context.Context, *ReorderChapterOutlineRequest) (*ReorderChapterOutlineResponse, error)
	// SwitchModel 切换AI模型
	SwitchModel(context.Context, *SwitchModelRequest) (*SwitchModelResponse, error)
	// UpdateChapterOutline 更新章节大纲
	UpdateChapterOutline(context.Context, *UpdateChapterOutlineRequest) (*UpdateChapterOutlineResponse, error)
	// UpdateProject 更新项目
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
}

func RegisterNovelServiceHTTPServer(s *http.Server, srv NovelServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/novel/projects", _NovelService_CreateProject0_HTTP_Handler(srv))
	r.GET("/api/v1/novel/projects/{project_id}", _NovelService_GetProject0_HTTP_Handler(srv))
	r.GET("/api/v1/novel/projects", _NovelService_ListProjects0_HTTP_Handler(srv))
	r.PUT("/api/v1/novel/projects/{project_id}", _NovelService_UpdateProject0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/worldview", _NovelService_GenerateWorldView0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/characters", _NovelService_GenerateCharacters0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/outline", _NovelService_GenerateOutline0_HTTP_Handler(srv))
	r.PUT("/api/v1/novel/projects/{project_id}/outline/chapters/{chapter_index}", _NovelService_UpdateChapterOutline0_HTTP_Handler(srv))
	r.DELETE("/api/v1/novel/projects/{project_id}/outline/chapters/{chapter_index}", _NovelService_DeleteChapterOutline0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/outline/reorder", _NovelService_ReorderChapterOutline0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/chapters", _NovelService_GenerateChapter0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/chapters/{chapter_id}/polish", _NovelService_PolishChapter0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/chapters/{chapter_id}/quality", _NovelService_CheckQuality0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/quality/batch", _NovelService_BatchCheckQuality0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/consistency", _NovelService_CheckConsistency0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/export", _NovelService_ExportNovel0_HTTP_Handler(srv))
	r.GET("/api/v1/novel/stats", _NovelService_GetStats0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/projects/{project_id}/video-script", _NovelService_GenerateVideoScript0_HTTP_Handler(srv))
	r.POST("/api/v1/novel/switch-model", _NovelService_SwitchModel0_HTTP_Handler(srv))
	r.GET("/api/v1/novel/models", _NovelService_ListModels0_HTTP_Handler(srv))
}

func _NovelService_CreateProject0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceCreateProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProject(ctx, req.(*CreateProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProjectResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GetProject0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGetProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProject(ctx, req.(*GetProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProjectResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_ListProjects0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProjectsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceListProjects)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProjects(ctx, req.(*ListProjectsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProjectsResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_UpdateProject0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceUpdateProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProject(ctx, req.(*UpdateProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProjectResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GenerateWorldView0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateWorldViewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGenerateWorldView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateWorldView(ctx, req.(*GenerateWorldViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateWorldViewResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GenerateCharacters0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateCharactersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGenerateCharacters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateCharacters(ctx, req.(*GenerateCharactersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateCharactersResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GenerateOutline0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateOutlineRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGenerateOutline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateOutline(ctx, req.(*GenerateOutlineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateOutlineResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_UpdateChapterOutline0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateChapterOutlineRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceUpdateChapterOutline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChapterOutline(ctx, req.(*UpdateChapterOutlineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateChapterOutlineResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_DeleteChapterOutline0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChapterOutlineRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceDeleteChapterOutline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChapterOutline(ctx, req.(*DeleteChapterOutlineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChapterOutlineResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_ReorderChapterOutline0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReorderChapterOutlineRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceReorderChapterOutline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReorderChapterOutline(ctx, req.(*ReorderChapterOutlineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReorderChapterOutlineResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GenerateChapter0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateChapterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGenerateChapter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateChapter(ctx, req.(*GenerateChapterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateChapterResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_PolishChapter0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PolishChapterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServicePolishChapter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PolishChapter(ctx, req.(*PolishChapterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PolishChapterResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_CheckQuality0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckQualityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceCheckQuality)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckQuality(ctx, req.(*CheckQualityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckQualityResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_BatchCheckQuality0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCheckQualityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceBatchCheckQuality)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCheckQuality(ctx, req.(*BatchCheckQualityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCheckQualityResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_CheckConsistency0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckConsistencyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceCheckConsistency)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckConsistency(ctx, req.(*CheckConsistencyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckConsistencyResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_ExportNovel0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportNovelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceExportNovel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportNovel(ctx, req.(*ExportNovelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExportNovelResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GetStats0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGetStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStats(ctx, req.(*GetStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_GenerateVideoScript0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateVideoScriptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceGenerateVideoScript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateVideoScript(ctx, req.(*GenerateVideoScriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateVideoScriptResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_SwitchModel0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SwitchModelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceSwitchModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SwitchModel(ctx, req.(*SwitchModelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwitchModelResponse)
		return ctx.Result(200, reply)
	}
}

func _NovelService_ListModels0_HTTP_Handler(srv NovelServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListModelsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNovelServiceListModels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListModels(ctx, req.(*ListModelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListModelsResponse)
		return ctx.Result(200, reply)
	}
}

type NovelServiceHTTPClient interface {
	BatchCheckQuality(ctx context.Context, req *BatchCheckQualityRequest, opts ...http.CallOption) (rsp *BatchCheckQualityResponse, err error)
	CheckConsistency(ctx context.Context, req *CheckConsistencyRequest, opts ...http.CallOption) (rsp *CheckConsistencyResponse, err error)
	CheckQuality(ctx context.Context, req *CheckQualityRequest, opts ...http.CallOption) (rsp *CheckQualityResponse, err error)
	CreateProject(ctx context.Context, req *CreateProjectRequest, opts ...http.CallOption) (rsp *CreateProjectResponse, err error)
	DeleteChapterOutline(ctx context.Context, req *DeleteChapterOutlineRequest, opts ...http.CallOption) (rsp *DeleteChapterOutlineResponse, err error)
	ExportNovel(ctx context.Context, req *ExportNovelRequest, opts ...http.CallOption) (rsp *ExportNovelResponse, err error)
	GenerateChapter(ctx context.Context, req *GenerateChapterRequest, opts ...http.CallOption) (rsp *GenerateChapterResponse, err error)
	GenerateCharacters(ctx context.Context, req *GenerateCharactersRequest, opts ...http.CallOption) (rsp *GenerateCharactersResponse, err error)
	GenerateOutline(ctx context.Context, req *GenerateOutlineRequest, opts ...http.CallOption) (rsp *GenerateOutlineResponse, err error)
	GenerateVideoScript(ctx context.Context, req *GenerateVideoScriptRequest, opts ...http.CallOption) (rsp *GenerateVideoScriptResponse, err error)
	GenerateWorldView(ctx context.Context, req *GenerateWorldViewRequest, opts ...http.CallOption) (rsp *GenerateWorldViewResponse, err error)
	GetProject(ctx context.Context, req *GetProjectRequest, opts ...http.CallOption) (rsp *GetProjectResponse, err error)
	GetStats(ctx context.Context, req *GetStatsRequest, opts ...http.CallOption) (rsp *GetStatsResponse, err error)
	ListModels(ctx context.Context, req *ListModelsRequest, opts ...http.CallOption) (rsp *ListModelsResponse, err error)
	ListProjects(ctx context.Context, req *ListProjectsRequest, opts ...http.CallOption) (rsp *ListProjectsResponse, err error)
	PolishChapter(ctx context.Context, req *PolishChapterRequest, opts ...http.CallOption) (rsp *PolishChapterResponse, err error)
	ReorderChapterOutline(ctx context.Context, req *ReorderChapterOutlineRequest, opts ...http.CallOption) (rsp *ReorderChapterOutlineResponse, err error)
	SwitchModel(ctx context.Context, req *SwitchModelRequest, opts ...http.CallOption) (rsp *SwitchModelResponse, err error)
	UpdateChapterOutline(ctx context.Context, req *UpdateChapterOutlineRequest, opts ...http.CallOption) (rsp *UpdateChapterOutlineResponse, err error)
	UpdateProject(ctx context.Context, req *UpdateProjectRequest, opts ...http.CallOption) (rsp *UpdateProjectResponse, err error)
}

type NovelServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNovelServiceHTTPClient(client *http.Client) NovelServiceHTTPClient {
	return &NovelServiceHTTPClientImpl{client}
}

func (c *NovelServiceHTTPClientImpl) BatchCheckQuality(ctx context.Context, in *BatchCheckQualityRequest, opts ...http.CallOption) (*BatchCheckQualityResponse, error) {
	var out BatchCheckQualityResponse
	pattern := "/api/v1/novel/projects/{project_id}/quality/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceBatchCheckQuality))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) CheckConsistency(ctx context.Context, in *CheckConsistencyRequest, opts ...http.CallOption) (*CheckConsistencyResponse, error) {
	var out CheckConsistencyResponse
	pattern := "/api/v1/novel/projects/{project_id}/consistency"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceCheckConsistency))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) CheckQuality(ctx context.Context, in *CheckQualityRequest, opts ...http.CallOption) (*CheckQualityResponse, error) {
	var out CheckQualityResponse
	pattern := "/api/v1/novel/projects/{project_id}/chapters/{chapter_id}/quality"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceCheckQuality))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...http.CallOption) (*CreateProjectResponse, error) {
	var out CreateProjectResponse
	pattern := "/api/v1/novel/projects"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceCreateProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) DeleteChapterOutline(ctx context.Context, in *DeleteChapterOutlineRequest, opts ...http.CallOption) (*DeleteChapterOutlineResponse, error) {
	var out DeleteChapterOutlineResponse
	pattern := "/api/v1/novel/projects/{project_id}/outline/chapters/{chapter_index}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNovelServiceDeleteChapterOutline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) ExportNovel(ctx context.Context, in *ExportNovelRequest, opts ...http.CallOption) (*ExportNovelResponse, error) {
	var out ExportNovelResponse
	pattern := "/api/v1/novel/projects/{project_id}/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceExportNovel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GenerateChapter(ctx context.Context, in *GenerateChapterRequest, opts ...http.CallOption) (*GenerateChapterResponse, error) {
	var out GenerateChapterResponse
	pattern := "/api/v1/novel/projects/{project_id}/chapters"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceGenerateChapter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GenerateCharacters(ctx context.Context, in *GenerateCharactersRequest, opts ...http.CallOption) (*GenerateCharactersResponse, error) {
	var out GenerateCharactersResponse
	pattern := "/api/v1/novel/projects/{project_id}/characters"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceGenerateCharacters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GenerateOutline(ctx context.Context, in *GenerateOutlineRequest, opts ...http.CallOption) (*GenerateOutlineResponse, error) {
	var out GenerateOutlineResponse
	pattern := "/api/v1/novel/projects/{project_id}/outline"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceGenerateOutline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...http.CallOption) (*GenerateVideoScriptResponse, error) {
	var out GenerateVideoScriptResponse
	pattern := "/api/v1/novel/projects/{project_id}/video-script"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceGenerateVideoScript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GenerateWorldView(ctx context.Context, in *GenerateWorldViewRequest, opts ...http.CallOption) (*GenerateWorldViewResponse, error) {
	var out GenerateWorldViewResponse
	pattern := "/api/v1/novel/projects/{project_id}/worldview"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceGenerateWorldView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GetProject(ctx context.Context, in *GetProjectRequest, opts ...http.CallOption) (*GetProjectResponse, error) {
	var out GetProjectResponse
	pattern := "/api/v1/novel/projects/{project_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNovelServiceGetProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) GetStats(ctx context.Context, in *GetStatsRequest, opts ...http.CallOption) (*GetStatsResponse, error) {
	var out GetStatsResponse
	pattern := "/api/v1/novel/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNovelServiceGetStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) ListModels(ctx context.Context, in *ListModelsRequest, opts ...http.CallOption) (*ListModelsResponse, error) {
	var out ListModelsResponse
	pattern := "/api/v1/novel/models"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNovelServiceListModels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...http.CallOption) (*ListProjectsResponse, error) {
	var out ListProjectsResponse
	pattern := "/api/v1/novel/projects"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNovelServiceListProjects))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) PolishChapter(ctx context.Context, in *PolishChapterRequest, opts ...http.CallOption) (*PolishChapterResponse, error) {
	var out PolishChapterResponse
	pattern := "/api/v1/novel/projects/{project_id}/chapters/{chapter_id}/polish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServicePolishChapter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) ReorderChapterOutline(ctx context.Context, in *ReorderChapterOutlineRequest, opts ...http.CallOption) (*ReorderChapterOutlineResponse, error) {
	var out ReorderChapterOutlineResponse
	pattern := "/api/v1/novel/projects/{project_id}/outline/reorder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceReorderChapterOutline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) SwitchModel(ctx context.Context, in *SwitchModelRequest, opts ...http.CallOption) (*SwitchModelResponse, error) {
	var out SwitchModelResponse
	pattern := "/api/v1/novel/switch-model"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceSwitchModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) UpdateChapterOutline(ctx context.Context, in *UpdateChapterOutlineRequest, opts ...http.CallOption) (*UpdateChapterOutlineResponse, error) {
	var out UpdateChapterOutlineResponse
	pattern := "/api/v1/novel/projects/{project_id}/outline/chapters/{chapter_index}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceUpdateChapterOutline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NovelServiceHTTPClientImpl) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...http.CallOption) (*UpdateProjectResponse, error) {
	var out UpdateProjectResponse
	pattern := "/api/v1/novel/projects/{project_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNovelServiceUpdateProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
