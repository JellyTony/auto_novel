// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: api/video_script/v1/video_script.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoScriptService_GenerateVideoScript_FullMethodName      = "/api.video_script.v1.VideoScriptService/GenerateVideoScript"
	VideoScriptService_OptimizeVideoScript_FullMethodName      = "/api.video_script.v1.VideoScriptService/OptimizeVideoScript"
	VideoScriptService_GeneratePlatformVariants_FullMethodName = "/api.video_script.v1.VideoScriptService/GeneratePlatformVariants"
	VideoScriptService_ListVideoScripts_FullMethodName         = "/api.video_script.v1.VideoScriptService/ListVideoScripts"
	VideoScriptService_GetVideoScript_FullMethodName           = "/api.video_script.v1.VideoScriptService/GetVideoScript"
	VideoScriptService_DeleteVideoScript_FullMethodName        = "/api.video_script.v1.VideoScriptService/DeleteVideoScript"
)

// VideoScriptServiceClient is the client API for VideoScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoScriptServiceClient interface {
	// 生成短视频脚本
	GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...grpc.CallOption) (*GenerateVideoScriptResponse, error)
	// 优化短视频脚本
	OptimizeVideoScript(ctx context.Context, in *OptimizeVideoScriptRequest, opts ...grpc.CallOption) (*OptimizeVideoScriptResponse, error)
	// 生成平台变体
	GeneratePlatformVariants(ctx context.Context, in *GeneratePlatformVariantsRequest, opts ...grpc.CallOption) (*GeneratePlatformVariantsResponse, error)
	// 获取视频脚本列表
	ListVideoScripts(ctx context.Context, in *ListVideoScriptsRequest, opts ...grpc.CallOption) (*ListVideoScriptsResponse, error)
	// 获取视频脚本详情
	GetVideoScript(ctx context.Context, in *GetVideoScriptRequest, opts ...grpc.CallOption) (*GetVideoScriptResponse, error)
	// 删除视频脚本
	DeleteVideoScript(ctx context.Context, in *DeleteVideoScriptRequest, opts ...grpc.CallOption) (*DeleteVideoScriptResponse, error)
}

type videoScriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoScriptServiceClient(cc grpc.ClientConnInterface) VideoScriptServiceClient {
	return &videoScriptServiceClient{cc}
}

func (c *videoScriptServiceClient) GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...grpc.CallOption) (*GenerateVideoScriptResponse, error) {
	out := new(GenerateVideoScriptResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_GenerateVideoScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScriptServiceClient) OptimizeVideoScript(ctx context.Context, in *OptimizeVideoScriptRequest, opts ...grpc.CallOption) (*OptimizeVideoScriptResponse, error) {
	out := new(OptimizeVideoScriptResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_OptimizeVideoScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScriptServiceClient) GeneratePlatformVariants(ctx context.Context, in *GeneratePlatformVariantsRequest, opts ...grpc.CallOption) (*GeneratePlatformVariantsResponse, error) {
	out := new(GeneratePlatformVariantsResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_GeneratePlatformVariants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScriptServiceClient) ListVideoScripts(ctx context.Context, in *ListVideoScriptsRequest, opts ...grpc.CallOption) (*ListVideoScriptsResponse, error) {
	out := new(ListVideoScriptsResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_ListVideoScripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScriptServiceClient) GetVideoScript(ctx context.Context, in *GetVideoScriptRequest, opts ...grpc.CallOption) (*GetVideoScriptResponse, error) {
	out := new(GetVideoScriptResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_GetVideoScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScriptServiceClient) DeleteVideoScript(ctx context.Context, in *DeleteVideoScriptRequest, opts ...grpc.CallOption) (*DeleteVideoScriptResponse, error) {
	out := new(DeleteVideoScriptResponse)
	err := c.cc.Invoke(ctx, VideoScriptService_DeleteVideoScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoScriptServiceServer is the server API for VideoScriptService service.
// All implementations must embed UnimplementedVideoScriptServiceServer
// for forward compatibility
type VideoScriptServiceServer interface {
	// 生成短视频脚本
	GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error)
	// 优化短视频脚本
	OptimizeVideoScript(context.Context, *OptimizeVideoScriptRequest) (*OptimizeVideoScriptResponse, error)
	// 生成平台变体
	GeneratePlatformVariants(context.Context, *GeneratePlatformVariantsRequest) (*GeneratePlatformVariantsResponse, error)
	// 获取视频脚本列表
	ListVideoScripts(context.Context, *ListVideoScriptsRequest) (*ListVideoScriptsResponse, error)
	// 获取视频脚本详情
	GetVideoScript(context.Context, *GetVideoScriptRequest) (*GetVideoScriptResponse, error)
	// 删除视频脚本
	DeleteVideoScript(context.Context, *DeleteVideoScriptRequest) (*DeleteVideoScriptResponse, error)
	mustEmbedUnimplementedVideoScriptServiceServer()
}

// UnimplementedVideoScriptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoScriptServiceServer struct {
}

func (UnimplementedVideoScriptServiceServer) GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideoScript not implemented")
}
func (UnimplementedVideoScriptServiceServer) OptimizeVideoScript(context.Context, *OptimizeVideoScriptRequest) (*OptimizeVideoScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeVideoScript not implemented")
}
func (UnimplementedVideoScriptServiceServer) GeneratePlatformVariants(context.Context, *GeneratePlatformVariantsRequest) (*GeneratePlatformVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePlatformVariants not implemented")
}
func (UnimplementedVideoScriptServiceServer) ListVideoScripts(context.Context, *ListVideoScriptsRequest) (*ListVideoScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideoScripts not implemented")
}
func (UnimplementedVideoScriptServiceServer) GetVideoScript(context.Context, *GetVideoScriptRequest) (*GetVideoScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoScript not implemented")
}
func (UnimplementedVideoScriptServiceServer) DeleteVideoScript(context.Context, *DeleteVideoScriptRequest) (*DeleteVideoScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoScript not implemented")
}
func (UnimplementedVideoScriptServiceServer) mustEmbedUnimplementedVideoScriptServiceServer() {}

// UnsafeVideoScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoScriptServiceServer will
// result in compilation errors.
type UnsafeVideoScriptServiceServer interface {
	mustEmbedUnimplementedVideoScriptServiceServer()
}

func RegisterVideoScriptServiceServer(s grpc.ServiceRegistrar, srv VideoScriptServiceServer) {
	s.RegisterService(&VideoScriptService_ServiceDesc, srv)
}

func _VideoScriptService_GenerateVideoScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVideoScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).GenerateVideoScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_GenerateVideoScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).GenerateVideoScript(ctx, req.(*GenerateVideoScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScriptService_OptimizeVideoScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeVideoScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).OptimizeVideoScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_OptimizeVideoScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).OptimizeVideoScript(ctx, req.(*OptimizeVideoScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScriptService_GeneratePlatformVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePlatformVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).GeneratePlatformVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_GeneratePlatformVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).GeneratePlatformVariants(ctx, req.(*GeneratePlatformVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScriptService_ListVideoScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).ListVideoScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_ListVideoScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).ListVideoScripts(ctx, req.(*ListVideoScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScriptService_GetVideoScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).GetVideoScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_GetVideoScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).GetVideoScript(ctx, req.(*GetVideoScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScriptService_DeleteVideoScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScriptServiceServer).DeleteVideoScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoScriptService_DeleteVideoScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScriptServiceServer).DeleteVideoScript(ctx, req.(*DeleteVideoScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoScriptService_ServiceDesc is the grpc.ServiceDesc for VideoScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.video_script.v1.VideoScriptService",
	HandlerType: (*VideoScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateVideoScript",
			Handler:    _VideoScriptService_GenerateVideoScript_Handler,
		},
		{
			MethodName: "OptimizeVideoScript",
			Handler:    _VideoScriptService_OptimizeVideoScript_Handler,
		},
		{
			MethodName: "GeneratePlatformVariants",
			Handler:    _VideoScriptService_GeneratePlatformVariants_Handler,
		},
		{
			MethodName: "ListVideoScripts",
			Handler:    _VideoScriptService_ListVideoScripts_Handler,
		},
		{
			MethodName: "GetVideoScript",
			Handler:    _VideoScriptService_GetVideoScript_Handler,
		},
		{
			MethodName: "DeleteVideoScript",
			Handler:    _VideoScriptService_DeleteVideoScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/video_script/v1/video_script.proto",
}
