// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.29.0
// source: video_script/v1/video_script.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoScriptServiceDeleteVideoScript = "/api.video_script.v1.VideoScriptService/DeleteVideoScript"
const OperationVideoScriptServiceGeneratePlatformVariants = "/api.video_script.v1.VideoScriptService/GeneratePlatformVariants"
const OperationVideoScriptServiceGenerateVideoScript = "/api.video_script.v1.VideoScriptService/GenerateVideoScript"
const OperationVideoScriptServiceGetVideoScript = "/api.video_script.v1.VideoScriptService/GetVideoScript"
const OperationVideoScriptServiceListVideoScripts = "/api.video_script.v1.VideoScriptService/ListVideoScripts"
const OperationVideoScriptServiceOptimizeVideoScript = "/api.video_script.v1.VideoScriptService/OptimizeVideoScript"

type VideoScriptServiceHTTPServer interface {
	// DeleteVideoScript 删除视频脚本
	DeleteVideoScript(context.Context, *DeleteVideoScriptRequest) (*DeleteVideoScriptResponse, error)
	// GeneratePlatformVariants 生成平台变体
	GeneratePlatformVariants(context.Context, *GeneratePlatformVariantsRequest) (*GeneratePlatformVariantsResponse, error)
	// GenerateVideoScript 生成短视频脚本
	GenerateVideoScript(context.Context, *GenerateVideoScriptRequest) (*GenerateVideoScriptResponse, error)
	// GetVideoScript 获取视频脚本详情
	GetVideoScript(context.Context, *GetVideoScriptRequest) (*GetVideoScriptResponse, error)
	// ListVideoScripts 获取视频脚本列表
	ListVideoScripts(context.Context, *ListVideoScriptsRequest) (*ListVideoScriptsResponse, error)
	// OptimizeVideoScript 优化短视频脚本
	OptimizeVideoScript(context.Context, *OptimizeVideoScriptRequest) (*OptimizeVideoScriptResponse, error)
}

func RegisterVideoScriptServiceHTTPServer(s *http.Server, srv VideoScriptServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/video-scripts/generate", _VideoScriptService_GenerateVideoScript1_HTTP_Handler(srv))
	r.PUT("/api/v1/video-scripts/{script_id}/optimize", _VideoScriptService_OptimizeVideoScript0_HTTP_Handler(srv))
	r.POST("/api/v1/video-scripts/{base_script_id}/variants", _VideoScriptService_GeneratePlatformVariants0_HTTP_Handler(srv))
	r.GET("/api/v1/projects/{project_id}/video-scripts", _VideoScriptService_ListVideoScripts0_HTTP_Handler(srv))
	r.GET("/api/v1/video-scripts/{script_id}", _VideoScriptService_GetVideoScript0_HTTP_Handler(srv))
	r.DELETE("/api/v1/video-scripts/{script_id}", _VideoScriptService_DeleteVideoScript0_HTTP_Handler(srv))
}

func _VideoScriptService_GenerateVideoScript1_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateVideoScriptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceGenerateVideoScript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateVideoScript(ctx, req.(*GenerateVideoScriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateVideoScriptResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoScriptService_OptimizeVideoScript0_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OptimizeVideoScriptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceOptimizeVideoScript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OptimizeVideoScript(ctx, req.(*OptimizeVideoScriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OptimizeVideoScriptResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoScriptService_GeneratePlatformVariants0_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GeneratePlatformVariantsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceGeneratePlatformVariants)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GeneratePlatformVariants(ctx, req.(*GeneratePlatformVariantsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GeneratePlatformVariantsResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoScriptService_ListVideoScripts0_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListVideoScriptsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceListVideoScripts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListVideoScripts(ctx, req.(*ListVideoScriptsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVideoScriptsResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoScriptService_GetVideoScript0_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoScriptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceGetVideoScript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoScript(ctx, req.(*GetVideoScriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoScriptResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoScriptService_DeleteVideoScript0_HTTP_Handler(srv VideoScriptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVideoScriptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoScriptServiceDeleteVideoScript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVideoScript(ctx, req.(*DeleteVideoScriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteVideoScriptResponse)
		return ctx.Result(200, reply)
	}
}

type VideoScriptServiceHTTPClient interface {
	DeleteVideoScript(ctx context.Context, req *DeleteVideoScriptRequest, opts ...http.CallOption) (rsp *DeleteVideoScriptResponse, err error)
	GeneratePlatformVariants(ctx context.Context, req *GeneratePlatformVariantsRequest, opts ...http.CallOption) (rsp *GeneratePlatformVariantsResponse, err error)
	GenerateVideoScript(ctx context.Context, req *GenerateVideoScriptRequest, opts ...http.CallOption) (rsp *GenerateVideoScriptResponse, err error)
	GetVideoScript(ctx context.Context, req *GetVideoScriptRequest, opts ...http.CallOption) (rsp *GetVideoScriptResponse, err error)
	ListVideoScripts(ctx context.Context, req *ListVideoScriptsRequest, opts ...http.CallOption) (rsp *ListVideoScriptsResponse, err error)
	OptimizeVideoScript(ctx context.Context, req *OptimizeVideoScriptRequest, opts ...http.CallOption) (rsp *OptimizeVideoScriptResponse, err error)
}

type VideoScriptServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoScriptServiceHTTPClient(client *http.Client) VideoScriptServiceHTTPClient {
	return &VideoScriptServiceHTTPClientImpl{client}
}

func (c *VideoScriptServiceHTTPClientImpl) DeleteVideoScript(ctx context.Context, in *DeleteVideoScriptRequest, opts ...http.CallOption) (*DeleteVideoScriptResponse, error) {
	var out DeleteVideoScriptResponse
	pattern := "/api/v1/video-scripts/{script_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoScriptServiceDeleteVideoScript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoScriptServiceHTTPClientImpl) GeneratePlatformVariants(ctx context.Context, in *GeneratePlatformVariantsRequest, opts ...http.CallOption) (*GeneratePlatformVariantsResponse, error) {
	var out GeneratePlatformVariantsResponse
	pattern := "/api/v1/video-scripts/{base_script_id}/variants"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoScriptServiceGeneratePlatformVariants))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoScriptServiceHTTPClientImpl) GenerateVideoScript(ctx context.Context, in *GenerateVideoScriptRequest, opts ...http.CallOption) (*GenerateVideoScriptResponse, error) {
	var out GenerateVideoScriptResponse
	pattern := "/api/v1/video-scripts/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoScriptServiceGenerateVideoScript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoScriptServiceHTTPClientImpl) GetVideoScript(ctx context.Context, in *GetVideoScriptRequest, opts ...http.CallOption) (*GetVideoScriptResponse, error) {
	var out GetVideoScriptResponse
	pattern := "/api/v1/video-scripts/{script_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoScriptServiceGetVideoScript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoScriptServiceHTTPClientImpl) ListVideoScripts(ctx context.Context, in *ListVideoScriptsRequest, opts ...http.CallOption) (*ListVideoScriptsResponse, error) {
	var out ListVideoScriptsResponse
	pattern := "/api/v1/projects/{project_id}/video-scripts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoScriptServiceListVideoScripts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoScriptServiceHTTPClientImpl) OptimizeVideoScript(ctx context.Context, in *OptimizeVideoScriptRequest, opts ...http.CallOption) (*OptimizeVideoScriptResponse, error) {
	var out OptimizeVideoScriptResponse
	pattern := "/api/v1/video-scripts/{script_id}/optimize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoScriptServiceOptimizeVideoScript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
