// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend/internal/agent/orchestrator"
	"backend/internal/biz"
	"backend/internal/conf"
	"backend/internal/data"
	"backend/internal/pkg/eino"
	"backend/internal/pkg/llm"
	"backend/internal/pkg/vector"
	"backend/internal/server"
	"backend/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, ai *conf.AI, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	videoScriptRepo := data.NewVideoScriptRepo(dataData, logger)
	videoScriptUseCase := biz.NewVideoScriptUseCase(videoScriptRepo, logger)
	videoScriptService := service.NewVideoScriptService(videoScriptUseCase, logger)
	novelRepo := data.NewNovelRepo(dataData, logger)
	exportService := service.NewExportService(logger)
	bizVideoScriptService := biz.NewVideoScriptServiceImpl(logger)
	novelUsecase := biz.NewNovelUsecase(novelRepo, exportService, bizVideoScriptService, logger)
	einoLLMClient, err := eino.NewDefaultEinoClient(ai, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	llmClient := llm.NewRealLLMClient(einoLLMClient)
	orchestratorAgent := orchestrator.NewOrchestratorAgentProvider(llmClient)
	ragService, err := vector.NewRAGServiceProvider(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	modelFactory, err := eino.NewModelFactory(ai)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	modelSwitcher := eino.NewModelSwitcher(modelFactory)
	novelService := service.NewNovelServiceWithRAG(novelUsecase, orchestratorAgent, einoLLMClient, ragService, llmClient, modelSwitcher)
	grpcServer := server.NewGRPCServer(confServer, greeterService, videoScriptService, novelService, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, videoScriptService, novelService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
