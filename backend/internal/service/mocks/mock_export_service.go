// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/biz/novel.go

package mocks

import (
	"context"
	"reflect"

	"backend/internal/pkg/models"
	"github.com/golang/mock/gomock"
)

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// ExportNovel mocks base method.
func (m *MockExportService) ExportNovel(ctx context.Context, project *models.NovelProject, format string, options *models.ExportOptions) (*models.ExportResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportNovel", ctx, project, format, options)
	ret0, _ := ret[0].(*models.ExportResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportNovel indicates an expected call of ExportNovel.
func (mr *MockExportServiceMockRecorder) ExportNovel(ctx, project, format, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportNovel", reflect.TypeOf((*MockExportService)(nil).ExportNovel), ctx, project, format, options)
}