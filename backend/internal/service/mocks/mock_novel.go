// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/biz/novel.go

package mocks

import (
	context "context"
	reflect "reflect"

	models "backend/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockNovelRepo is a mock of NovelRepo interface.
type MockNovelRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNovelRepoMockRecorder
}

// MockNovelRepoMockRecorder is the mock recorder for MockNovelRepo.
type MockNovelRepoMockRecorder struct {
	mock *MockNovelRepo
}

// NewMockNovelRepo creates a new mock instance.
func NewMockNovelRepo(ctrl *gomock.Controller) *MockNovelRepo {
	mock := &MockNovelRepo{ctrl: ctrl}
	mock.recorder = &MockNovelRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNovelRepo) EXPECT() *MockNovelRepoMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockNovelRepo) CreateProject(arg0 context.Context, arg1 *models.NovelProject) (*models.NovelProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*models.NovelProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockNovelRepoMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockNovelRepo)(nil).CreateProject), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockNovelRepo) DeleteProject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockNovelRepoMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockNovelRepo)(nil).DeleteProject), arg0, arg1)
}

// GetProject mocks base method.
func (m *MockNovelRepo) GetProject(arg0 context.Context, arg1 string) (*models.NovelProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*models.NovelProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockNovelRepoMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockNovelRepo)(nil).GetProject), arg0, arg1)
}

// ListProjects mocks base method.
func (m *MockNovelRepo) ListProjects(arg0 context.Context, arg1, arg2 int) ([]*models.NovelProject, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.NovelProject)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockNovelRepoMockRecorder) ListProjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockNovelRepo)(nil).ListProjects), arg0, arg1, arg2)
}

// UpdateProject mocks base method.
func (m *MockNovelRepo) UpdateProject(arg0 context.Context, arg1 *models.NovelProject) (*models.NovelProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*models.NovelProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockNovelRepoMockRecorder) UpdateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockNovelRepo)(nil).UpdateProject), arg0, arg1)
}

// DeleteChapter mocks base method.
func (m *MockNovelRepo) DeleteChapter(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChapter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChapter indicates an expected call of DeleteChapter.
func (mr *MockNovelRepoMockRecorder) DeleteChapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChapter", reflect.TypeOf((*MockNovelRepo)(nil).DeleteChapter), arg0, arg1)
}

// GetChapter mocks base method.
func (m *MockNovelRepo) GetChapter(arg0 context.Context, arg1 string) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChapter", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChapter indicates an expected call of GetChapter.
func (mr *MockNovelRepoMockRecorder) GetChapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapter", reflect.TypeOf((*MockNovelRepo)(nil).GetChapter), arg0, arg1)
}

// ListChapters mocks base method.
func (m *MockNovelRepo) ListChapters(arg0 context.Context, arg1 string) ([]*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChapters", arg0, arg1)
	ret0, _ := ret[0].([]*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChapters indicates an expected call of ListChapters.
func (mr *MockNovelRepoMockRecorder) ListChapters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChapters", reflect.TypeOf((*MockNovelRepo)(nil).ListChapters), arg0, arg1)
}

// SaveChapter mocks base method.
func (m *MockNovelRepo) SaveChapter(arg0 context.Context, arg1 *models.Chapter) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChapter", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveChapter indicates an expected call of SaveChapter.
func (mr *MockNovelRepoMockRecorder) SaveChapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChapter", reflect.TypeOf((*MockNovelRepo)(nil).SaveChapter), arg0, arg1)
}

// UpdateChapter mocks base method.
func (m *MockNovelRepo) UpdateChapter(arg0 context.Context, arg1 *models.Chapter) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChapter", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChapter indicates an expected call of UpdateChapter.
func (mr *MockNovelRepoMockRecorder) UpdateChapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChapter", reflect.TypeOf((*MockNovelRepo)(nil).UpdateChapter), arg0, arg1)
}