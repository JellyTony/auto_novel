// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/video_script.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend/internal/pkg/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVideoScriptRepo is a mock of VideoScriptRepo interface.
type MockVideoScriptRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoScriptRepoMockRecorder
}

// MockVideoScriptRepoMockRecorder is the mock recorder for MockVideoScriptRepo.
type MockVideoScriptRepoMockRecorder struct {
	mock *MockVideoScriptRepo
}

// NewMockVideoScriptRepo creates a new mock instance.
func NewMockVideoScriptRepo(ctrl *gomock.Controller) *MockVideoScriptRepo {
	mock := &MockVideoScriptRepo{ctrl: ctrl}
	mock.recorder = &MockVideoScriptRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoScriptRepo) EXPECT() *MockVideoScriptRepoMockRecorder {
	return m.recorder
}

// DeleteVideoScript mocks base method.
func (m *MockVideoScriptRepo) DeleteVideoScript(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideoScript", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideoScript indicates an expected call of DeleteVideoScript.
func (mr *MockVideoScriptRepoMockRecorder) DeleteVideoScript(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideoScript", reflect.TypeOf((*MockVideoScriptRepo)(nil).DeleteVideoScript), ctx, id)
}

// GetVideoScript mocks base method.
func (m *MockVideoScriptRepo) GetVideoScript(ctx context.Context, id string) (*models.VideoScript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoScript", ctx, id)
	ret0, _ := ret[0].(*models.VideoScript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoScript indicates an expected call of GetVideoScript.
func (mr *MockVideoScriptRepoMockRecorder) GetVideoScript(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoScript", reflect.TypeOf((*MockVideoScriptRepo)(nil).GetVideoScript), ctx, id)
}

// ListVideoScripts mocks base method.
func (m *MockVideoScriptRepo) ListVideoScripts(ctx context.Context, projectID string, page, pageSize int) ([]*models.VideoScript, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVideoScripts", ctx, projectID, page, pageSize)
	ret0, _ := ret[0].([]*models.VideoScript)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVideoScripts indicates an expected call of ListVideoScripts.
func (mr *MockVideoScriptRepoMockRecorder) ListVideoScripts(ctx, projectID, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideoScripts", reflect.TypeOf((*MockVideoScriptRepo)(nil).ListVideoScripts), ctx, projectID, page, pageSize)
}

// ListVideoScriptsByChapter mocks base method.
func (m *MockVideoScriptRepo) ListVideoScriptsByChapter(ctx context.Context, chapterID string) ([]*models.VideoScript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVideoScriptsByChapter", ctx, chapterID)
	ret0, _ := ret[0].([]*models.VideoScript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVideoScriptsByChapter indicates an expected call of ListVideoScriptsByChapter.
func (mr *MockVideoScriptRepoMockRecorder) ListVideoScriptsByChapter(ctx, chapterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideoScriptsByChapter", reflect.TypeOf((*MockVideoScriptRepo)(nil).ListVideoScriptsByChapter), ctx, chapterID)
}

// SaveVideoScript mocks base method.
func (m *MockVideoScriptRepo) SaveVideoScript(ctx context.Context, script *models.VideoScript) (*models.VideoScript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVideoScript", ctx, script)
	ret0, _ := ret[0].(*models.VideoScript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveVideoScript indicates an expected call of SaveVideoScript.
func (mr *MockVideoScriptRepoMockRecorder) SaveVideoScript(ctx, script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVideoScript", reflect.TypeOf((*MockVideoScriptRepo)(nil).SaveVideoScript), ctx, script)
}

// UpdateVideoScript mocks base method.
func (m *MockVideoScriptRepo) UpdateVideoScript(ctx context.Context, script *models.VideoScript) (*models.VideoScript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoScript", ctx, script)
	ret0, _ := ret[0].(*models.VideoScript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideoScript indicates an expected call of UpdateVideoScript.
func (mr *MockVideoScriptRepoMockRecorder) UpdateVideoScript(ctx, script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoScript", reflect.TypeOf((*MockVideoScriptRepo)(nil).UpdateVideoScript), ctx, script)
}
