// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/video_script/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	video_script "backend/internal/agent/video_script"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVideoScriptAgent is a mock of VideoScriptAgent interface.
type MockVideoScriptAgent struct {
	ctrl     *gomock.Controller
	recorder *MockVideoScriptAgentMockRecorder
}

// MockVideoScriptAgentMockRecorder is the mock recorder for MockVideoScriptAgent.
type MockVideoScriptAgentMockRecorder struct {
	mock *MockVideoScriptAgent
}

// NewMockVideoScriptAgent creates a new mock instance.
func NewMockVideoScriptAgent(ctrl *gomock.Controller) *MockVideoScriptAgent {
	mock := &MockVideoScriptAgent{ctrl: ctrl}
	mock.recorder = &MockVideoScriptAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoScriptAgent) EXPECT() *MockVideoScriptAgentMockRecorder {
	return m.recorder
}

// GeneratePlatformVariants mocks base method.
func (m *MockVideoScriptAgent) GeneratePlatformVariants(ctx context.Context, req *video_script.GeneratePlatformVariantsRequest) (*video_script.GeneratePlatformVariantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePlatformVariants", ctx, req)
	ret0, _ := ret[0].(*video_script.GeneratePlatformVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePlatformVariants indicates an expected call of GeneratePlatformVariants.
func (mr *MockVideoScriptAgentMockRecorder) GeneratePlatformVariants(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePlatformVariants", reflect.TypeOf((*MockVideoScriptAgent)(nil).GeneratePlatformVariants), ctx, req)
}

// GenerateVideoScript mocks base method.
func (m *MockVideoScriptAgent) GenerateVideoScript(ctx context.Context, req *video_script.GenerateVideoScriptRequest) (*video_script.GenerateVideoScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVideoScript", ctx, req)
	ret0, _ := ret[0].(*video_script.GenerateVideoScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVideoScript indicates an expected call of GenerateVideoScript.
func (mr *MockVideoScriptAgentMockRecorder) GenerateVideoScript(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVideoScript", reflect.TypeOf((*MockVideoScriptAgent)(nil).GenerateVideoScript), ctx, req)
}

// GetCapabilities mocks base method.
func (m *MockVideoScriptAgent) GetCapabilities() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockVideoScriptAgentMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockVideoScriptAgent)(nil).GetCapabilities))
}

// OptimizeVideoScript mocks base method.
func (m *MockVideoScriptAgent) OptimizeVideoScript(ctx context.Context, req *video_script.OptimizeVideoScriptRequest) (*video_script.OptimizeVideoScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizeVideoScript", ctx, req)
	ret0, _ := ret[0].(*video_script.OptimizeVideoScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizeVideoScript indicates an expected call of OptimizeVideoScript.
func (mr *MockVideoScriptAgentMockRecorder) OptimizeVideoScript(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizeVideoScript", reflect.TypeOf((*MockVideoScriptAgent)(nil).OptimizeVideoScript), ctx, req)
}
