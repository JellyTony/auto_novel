// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/biz/novel.go

package mocks

import (
	"context"
	"reflect"

	"backend/internal/pkg/models"
	"github.com/golang/mock/gomock"
)

// MockVideoScriptService is a mock of VideoScriptService interface.
type MockVideoScriptService struct {
	ctrl     *gomock.Controller
	recorder *MockVideoScriptServiceMockRecorder
}

// MockVideoScriptServiceMockRecorder is the mock recorder for MockVideoScriptService.
type MockVideoScriptServiceMockRecorder struct {
	mock *MockVideoScriptService
}

// NewMockVideoScriptService creates a new mock instance.
func NewMockVideoScriptService(ctrl *gomock.Controller) *MockVideoScriptService {
	mock := &MockVideoScriptService{ctrl: ctrl}
	mock.recorder = &MockVideoScriptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoScriptService) EXPECT() *MockVideoScriptServiceMockRecorder {
	return m.recorder
}

// GenerateVideoScript mocks base method.
func (m *MockVideoScriptService) GenerateVideoScript(ctx context.Context, chapters []*models.Chapter, options *models.VideoScriptOptions) ([]*models.VideoScene, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVideoScript", ctx, chapters, options)
	ret0, _ := ret[0].([]*models.VideoScene)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVideoScript indicates an expected call of GenerateVideoScript.
func (mr *MockVideoScriptServiceMockRecorder) GenerateVideoScript(ctx, chapters, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVideoScript", reflect.TypeOf((*MockVideoScriptService)(nil).GenerateVideoScript), ctx, chapters, options)
}